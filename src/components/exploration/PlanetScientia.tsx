import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'motion/react';
import { 
  ArrowLeft, 
  Atom,
  Zap,
  Droplet,
  Leaf,
  User,
  Eye,
  Magnet,
  Wind,
  Trash,
  Beaker,
  FlaskConical,
  Lightbulb,
  Heart,
  TreePine,
  Globe,
  Gauge,
  Sun,
  Battery,
  Star,
  Play,
  Lock,
  CheckCircle,
  Trophy,
  Target,
  Gamepad2,
  Puzzle,
  Crown,
  Microscope,
  Compass,
  Flower,
  Fish,
  Mountain,
  Cpu
} from 'lucide-react';
import { Button } from '../ui/button';
import { Card, CardContent } from '../ui/card';
import { Badge } from '../ui/badge';
import { Progress } from '../ui/progress';
import type { Language } from '../../types/onboarding';

interface PlanetScientiaProps {
  language: Language;
  onBack: () => void;
  onNavigateToMission: (missionId: string) => void;
}

interface ScienceTopic {
  id: string;
  name: { en: string; hi: string; or: string };
  description: { en: string; hi: string; or: string };
  icon: React.ElementType;
  color: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  xpReward: number;
  estimatedTime: number;
  isUnlocked: boolean;
  progress: number;
  position: { x: number; y: number };
  glowColor: string;
  subGames: {
    id: string;
    name: { en: string; hi: string; or: string };
    type: 'game' | 'puzzle' | 'challenge';
  }[];
}

const SCIENCE_TOPICS: ScienceTopic[] = [
  // Featured Lab Games - Working Interactive Labs
  {
    id: 'chemistry-lab',
    name: { 
      en: 'üß™ Chemistry Laboratory', 
      hi: 'üß™ ‡§∞‡§∏‡§æ‡§Ø‡§® ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≤‡§æ', 
      or: 'üß™ ‡¨∞‡¨∏‡¨æ‡≠ü‡¨® ‡¨≤‡¨æ‡¨¨‡≠ã‡¨∞‡≠á‡¨ü‡≠ã‡¨∞‡≠Ä' 
    },
    description: { 
      en: 'Fully interactive chemistry lab! Mix chemicals, create reactions, and discover the magic of chemistry safely!', 
      hi: '‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§∞‡§∏‡§æ‡§Ø‡§® ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≤‡§æ! ‡§∞‡§∏‡§æ‡§Ø‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§Æ‡§ø‡§≤‡§æ‡§è‡§Ç, ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§è‡§Ç ‡§¨‡§®‡§æ‡§è‡§Ç, ‡§î‡§∞ ‡§∞‡§∏‡§æ‡§Ø‡§® ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•á ‡§ú‡§æ‡§¶‡•Ç ‡§ï‡•ã ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ñ‡•ã‡§ú‡•á‡§Ç!', 
      or: '‡¨∏‡¨Æ‡≠ç‡¨™‡≠Ç‡¨∞‡≠ç‡¨£‡≠ç‡¨£ ‡¨á‡¨£‡≠ç‡¨ü‡¨∞‡¨æ‡¨ï‡≠ç‡¨ü‡¨ø‡¨≠ ‡¨∞‡¨∏‡¨æ‡≠ü‡¨® ‡¨≤‡¨æ‡¨¨‡≠ã‡¨∞‡≠á‡¨ü‡≠ã‡¨∞‡≠Ä! ‡¨∞‡¨æ‡¨∏‡¨æ‡≠ü‡¨®‡¨ø‡¨ï ‡¨Æ‡¨ø‡¨∂‡¨æ‡¨®‡≠ç‡¨§‡≠Å, ‡¨Ö‡¨≠‡¨ø‡¨ï‡≠ç‡¨∞‡¨ø‡≠ü‡¨æ ‡¨∏‡≠É‡¨∑‡≠ç‡¨ü‡¨ø ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: FlaskConical,
    color: 'from-blue-600 to-indigo-600',
    difficulty: 'intermediate',
    xpReward: 300,
    estimatedTime: 45,
    isUnlocked: true,
    progress: 0,
    position: { x: 15, y: 10 },
    glowColor: 'rgba(59, 130, 246, 0.8)',
    subGames: [
      { id: 'volcano-eruption', name: { en: 'Volcano Eruption', hi: '‡§ú‡•ç‡§µ‡§æ‡§≤‡§æ‡§Æ‡•Å‡§ñ‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§´‡•ã‡§ü', or: '‡¨Ü‡¨ó‡≠ç‡¨®‡≠á‡≠ü‡¨ó‡¨ø‡¨∞‡¨ø ‡¨¨‡¨ø‡¨∏‡≠ç‡¨´‡≠ã‡¨∞‡¨£' }, type: 'game' },
      { id: 'rainbow-mix', name: { en: 'Rainbow Color Mix', hi: '‡§á‡§Ç‡§¶‡•ç‡§∞‡§ß‡§®‡•Å‡§∑ ‡§∞‡§Ç‡§ó ‡§Æ‡§ø‡§∂‡•ç‡§∞‡§£', or: '‡¨á‡¨®‡≠ç‡¨¶‡≠ç‡¨∞‡¨ß‡¨®‡≠Å ‡¨∞‡¨ô‡≠ç‡¨ó ‡¨Æ‡¨ø‡¨∂‡≠ç‡¨∞‡¨£' }, type: 'puzzle' },
      { id: 'crystal-formation', name: { en: 'Crystal Formation', hi: '‡§ï‡•ç‡§∞‡§ø‡§∏‡•ç‡§ü‡§≤ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£', or: '‡¨ï‡≠ç‡¨∞‡¨ø‡¨∑‡≠ç‡¨ü‡¨æ‡¨≤ ‡¨ó‡¨†‡¨®' }, type: 'challenge' }
    ]
  },
  {
    id: 'biology-lab',
    name: { 
      en: 'üî¨ Biology Laboratory', 
      hi: 'üî¨ ‡§ú‡•Ä‡§µ ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≤‡§æ', 
      or: 'üî¨ ‡¨ú‡≠Ä‡¨¨ ‡¨¨‡¨ø‡¨ú‡≠ç‡¨û‡¨æ‡¨® ‡¨≤‡¨æ‡¨¨‡≠ã‡¨∞‡≠á‡¨ü‡≠ã‡¨∞‡≠Ä' 
    },
    description: { 
      en: 'Explore cells and life through our virtual microscope! Study plant cells, animal cells, and fascinating microorganisms!', 
      hi: '‡§π‡§Æ‡§æ‡§∞‡•á ‡§µ‡§∞‡•ç‡§ö‡•Å‡§Ö‡§≤ ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§∏‡•ç‡§ï‡•ã‡§™ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§ú‡•Ä‡§µ‡§® ‡§ï‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç! ‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§ï‡§æ‡§ì‡§Ç, ‡§™‡§∂‡•Å ‡§ï‡•ã‡§∂‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï ‡§∏‡•Ç‡§ï‡•ç‡§∑‡•ç‡§Æ‡§ú‡•Ä‡§µ‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨Ü‡¨Æ‡¨∞ ‡¨≠‡¨∞‡≠ç‡¨ö‡≠Å‡¨Ü‡¨≤ ‡¨Æ‡¨æ‡¨á‡¨ï‡≠ç‡¨∞‡≠ã‡¨∏‡≠ç‡¨ï‡≠ã‡¨™ ‡¨Æ‡¨æ‡¨ß‡≠ç‡≠ü‡¨Æ‡¨∞‡≠á ‡¨ï‡≠ã‡¨∑ ‡¨è‡¨¨‡¨Ç ‡¨ú‡≠Ä‡¨¨‡¨® ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Microscope,
    color: 'from-green-600 to-teal-600',
    difficulty: 'intermediate',
    xpReward: 350,
    estimatedTime: 40,
    isUnlocked: true,
    progress: 0,
    position: { x: 40, y: 8 },
    glowColor: 'rgba(34, 197, 94, 0.8)',
    subGames: [
      { id: 'cell-parts', name: { en: 'Identify Cell Parts', hi: '‡§ï‡•ã‡§∂‡§ø‡§ï‡§æ ‡§≠‡§æ‡§ó‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§®', or: '‡¨ï‡≠ã‡¨∑ ‡¨Ö‡¨Ç‡¨∂ ‡¨ö‡¨ø‡¨π‡≠ç‡¨®‡¨ü' }, type: 'game' },
      { id: 'plant-breathing', name: { en: 'How Plants Breathe', hi: '‡§™‡•å‡§ß‡•á ‡§ï‡•à‡§∏‡•á ‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§§‡•á ‡§π‡•à‡§Ç', or: '‡¨â‡¨¶‡≠ç‡¨≠‡¨ø‡¨¶ ‡¨ï‡¨ø‡¨™‡¨∞‡¨ø ‡¨∂‡≠ç‡≠±‡¨æ‡¨∏ ‡¨®‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡¨ø' }, type: 'puzzle' },
      { id: 'microbe-study', name: { en: 'Microbe Investigation', hi: '‡§∏‡•Ç‡§ï‡•ç‡§∑‡•ç‡§Æ‡§ú‡•Ä‡§µ ‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§®', or: '‡¨∏‡≠Ç‡¨ï‡≠ç‡¨∑‡≠ç‡¨Æ‡¨ú‡≠Ä‡¨¨ ‡¨Ö‡¨®‡≠Å‡¨∏‡¨®‡≠ç‡¨ß‡¨æ‡¨®' }, type: 'challenge' }
    ]
  },
  {
    id: 'physics-lab',
    name: { 
      en: '‚ö° Physics Laboratory', 
      hi: '‚ö° ‡§≠‡•å‡§§‡§ø‡§ï ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≤‡§æ', 
      or: '‚ö° ‡¨≠‡≠å‡¨§‡¨ø‡¨ï ‡¨¨‡¨ø‡¨ú‡≠ç‡¨û‡¨æ‡¨® ‡¨≤‡¨æ‡¨¨‡≠ã‡¨∞‡≠á‡¨ü‡≠ã‡¨∞‡≠Ä' 
    },
    description: { 
      en: 'Discover the magic of motion, gravity, and forces! Play with balls, magnets, and see physics in action!', 
      hi: '‡§ó‡§§‡§ø, ‡§ó‡•Å‡§∞‡•Å‡§§‡•ç‡§µ‡§æ‡§ï‡§∞‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§¨‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§ú‡§æ‡§¶‡•Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç! ‡§ó‡•á‡§Ç‡§¶‡•ã‡§Ç, ‡§ö‡•Å‡§Ç‡§¨‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ñ‡•á‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§≠‡•å‡§§‡§ø‡§ï‡•Ä ‡§ï‡•ã ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§ñ‡•á‡§Ç!', 
      or: '‡¨ó‡¨§‡¨ø, ‡¨Æ‡¨æ‡¨ß‡≠ç‡≠ü‡¨æ‡¨ï‡¨∞‡≠ç‡¨∑‡¨£ ‡¨è‡¨¨‡¨Ç ‡¨¨‡¨≥‡¨∞ ‡¨Ø‡¨æ‡¨¶‡≠Å ‡¨Ü‡¨¨‡¨ø‡¨∑‡≠ç‡¨ï‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Zap,
    color: 'from-yellow-600 to-orange-600',
    difficulty: 'beginner',
    xpReward: 250,
    estimatedTime: 30,
    isUnlocked: true,
    progress: 0,
    position: { x: 65, y: 12 },
    glowColor: 'rgba(245, 158, 11, 0.8)',
    subGames: [
      { id: 'bouncing-ball', name: { en: 'Bouncing Ball', hi: '‡§â‡§õ‡§≤‡§§‡•Ä ‡§ó‡•á‡§Ç‡§¶', or: '‡¨â‡¨õ‡≠Å‡¨≥‡≠Å‡¨•‡¨ø‡¨¨‡¨æ ‡¨¨‡¨≤' }, type: 'game' },
      { id: 'magnet-power', name: { en: 'Magnet Power', hi: '‡§ö‡•Å‡§Ç‡§¨‡§ï ‡§∂‡§ï‡•ç‡§§‡§ø', or: '‡¨ö‡≠Å‡¨Æ‡≠ç‡¨¨‡¨ï ‡¨∂‡¨ï‡≠ç‡¨§‡¨ø' }, type: 'puzzle' },
      { id: 'gravity-drop', name: { en: 'Gravity Drop', hi: '‡§ó‡•Å‡§∞‡•Å‡§§‡•ç‡§µ‡§æ‡§ï‡§∞‡•ç‡§∑‡§£ ‡§°‡•ç‡§∞‡•â‡§™', or: '‡¨Æ‡¨æ‡¨ß‡≠ç‡≠ü‡¨æ‡¨ï‡¨∞‡≠ç‡¨∑‡¨£ ‡¨°‡≠ç‡¨∞‡¨™' }, type: 'challenge' }
    ]
  },
  {
    id: 'food-components',
    name: { 
      en: 'Nutrient Universe', 
      hi: '‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§°', 
      or: '‡¨™‡≠ã‡¨∑‡¨ï ‡¨§‡¨§‡≠ç‡¨§‡≠ç‡≠± ‡¨¨‡≠ç‡¨∞‡¨π‡≠ç‡¨Æ‡¨æ‡¨£‡≠ç‡¨°' 
    },
    description: { 
      en: 'Discover the magical world of nutrients, vitamins, and balanced diet adventures!', 
      hi: '‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ‡•ã‡§Ç, ‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§® ‡§î‡§∞ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§Ü‡§π‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§¶‡•Å‡§à ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨™‡≠ã‡¨∑‡¨ï ‡¨§‡¨§‡≠ç‡¨§‡≠ç‡≠±, ‡¨≠‡¨ø‡¨ü‡¨æ‡¨Æ‡¨ø‡¨®‡≠ç ‡¨è‡¨¨‡¨Ç ‡¨∏‡¨®‡≠ç‡¨§‡≠Å‡¨≥‡¨ø‡¨§ ‡¨ñ‡¨æ‡¨¶‡≠ç‡≠ü‡¨∞ ‡¨Ø‡¨æ‡¨¶‡≠Å‡¨ó‡¨∞ ‡¨¶‡≠Å‡¨®‡¨ø‡¨Ü ‡¨Ü‡¨¨‡¨ø‡¨∑‡≠ç‡¨ï‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Crown,
    color: 'from-green-600 to-emerald-600',
    difficulty: 'beginner',
    xpReward: 200,
    estimatedTime: 30,
    isUnlocked: true,
    progress: 100, // Already completed
    position: { x: 20, y: 15 },
    glowColor: 'rgba(34, 197, 94, 0.6)',
    subGames: [
      { id: 'nutrient-navigator', name: { en: 'Nutrient Navigator', hi: '‡§™‡•ã‡§∑‡§ï ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü‡§∞', or: '‡¨™‡≠ã‡¨∑‡¨ï ‡¨®‡≠á‡¨≠‡¨ø‡¨ó‡≠á‡¨ü‡¨∞' }, type: 'game' },
      { id: 'balanced-diet', name: { en: 'Diet Designer', hi: '‡§Ü‡§π‡§æ‡§∞ ‡§°‡§ø‡§ú‡§æ‡§á‡§®‡§∞', or: '‡¨Ü‡¨π‡¨æ‡¨∞ ‡¨°‡¨ø‡¨ú‡¨æ‡¨á‡¨®‡¨∞‡≠ç' }, type: 'puzzle' },
      { id: 'vitamin-quest', name: { en: 'Vitamin Quest', hi: '‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§® ‡§ñ‡•ã‡§ú', or: '‡¨≠‡¨ø‡¨ü‡¨æ‡¨Æ‡¨ø‡¨®‡≠ç ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£' }, type: 'challenge' }
    ]
  },
  {
    id: 'food-sources',
    name: { 
      en: 'Food Origin Safari', 
      hi: '‡§≠‡•ã‡§ú‡§® ‡§Æ‡•Ç‡§≤ ‡§∏‡§´‡§æ‡§∞‡•Ä', 
      or: '‡¨ñ‡¨æ‡¨¶‡≠ç‡≠ü ‡¨Æ‡≠Ç‡¨≥ ‡¨∏‡¨´‡¨æ‡¨∞‡¨ø' 
    },
    description: { 
      en: 'Explore where food comes from - plants, animals, and the food chain adventure!', 
      hi: '‡§≠‡•ã‡§ú‡§® ‡§ï‡§π‡§æ‡§Ç ‡§∏‡•á ‡§Ü‡§§‡§æ ‡§π‡•à - ‡§™‡•å‡§ß‡•á, ‡§ú‡§æ‡§®‡§µ‡§∞ ‡§î‡§∞ ‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§∂‡•ç‡§∞‡•É‡§Ç‡§ñ‡§≤‡§æ ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨ñ‡¨æ‡¨¶‡≠ç‡≠ü ‡¨ï‡≠á‡¨â‡¨Å‡¨†‡¨æ‡¨∞‡≠Å ‡¨Ü‡¨∏‡≠á - ‡¨â‡¨¶‡≠ç‡¨≠‡¨ø‡¨¶, ‡¨™‡≠ç‡¨∞‡¨æ‡¨£‡≠Ä ‡¨è‡¨¨‡¨Ç ‡¨ñ‡¨æ‡¨¶‡≠ç‡≠ü ‡¨∂‡≠É‡¨ô‡≠ç‡¨ñ‡¨≥‡¨æ ‡¨¶‡≠Å‡¨É‡¨∏‡¨æ‡¨π‡¨∏‡¨ø‡¨ï ‡¨ï‡¨æ‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: TreePine,
    color: 'from-lime-600 to-green-600',
    difficulty: 'beginner',
    xpReward: 180,
    estimatedTime: 25,
    isUnlocked: true,
    progress: 0,
    position: { x: 45, y: 20 },
    glowColor: 'rgba(101, 163, 13, 0.6)',
    subGames: [
      { id: 'plant-parts-food', name: { en: 'Plant Parts Kitchen', hi: '‡§™‡•å‡§ß‡•á ‡§≠‡§æ‡§ó‡•ã‡§Ç ‡§∞‡§∏‡•ã‡§à', or: '‡¨â‡¨¶‡≠ç‡¨≠‡¨ø‡¨¶ ‡¨Ö‡¨Ç‡¨∂ ‡¨∞‡≠ã‡¨∑‡≠á‡¨á' }, type: 'game' },
      { id: 'animal-products', name: { en: 'Animal Product Hunt', hi: '‡§™‡§∂‡•Å ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§∂‡§ø‡§ï‡§æ‡§∞', or: '‡¨™‡¨∂‡≠Å ‡¨â‡¨§‡≠ç‡¨™‡¨æ‡¨¶ ‡¨∂‡¨ø‡¨ï‡¨æ‡¨∞' }, type: 'puzzle' },
      { id: 'herbivore-carnivore', name: { en: 'Eating Habits Detective', hi: '‡§ñ‡§æ‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§¶‡§§‡•á‡§Ç ‡§ú‡§æ‡§∏‡•Ç‡§∏', or: '‡¨ñ‡¨æ‡¨á‡¨¨‡¨æ ‡¨Ö‡¨≠‡≠ç‡≠ü‡¨æ‡¨∏ ‡¨ó‡≠Å‡¨™‡≠ç‡¨§‡¨ö‡¨∞' }, type: 'challenge' }
    ]
  },
  {
    id: 'fibre-fabric',
    name: { 
      en: 'Fabric Factory', 
      hi: '‡§ï‡§™‡§°‡§º‡§æ ‡§ï‡§æ‡§∞‡§ñ‡§æ‡§®‡§æ', 
      or: '‡¨ï‡¨™‡¨°‡¨º‡¨æ ‡¨ï‡¨æ‡¨∞‡¨ñ‡¨æ‡¨®‡¨æ' 
    },
    description: { 
      en: 'Journey from fibre to fabric - spinning, weaving, and textile adventures!', 
      hi: '‡§´‡§æ‡§á‡§¨‡§∞ ‡§∏‡•á ‡§ï‡§™‡§°‡§º‡•á ‡§§‡§ï ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ - ‡§ï‡§§‡§æ‡§à, ‡§¨‡•Å‡§®‡§æ‡§à ‡§î‡§∞ ‡§ï‡§™‡§°‡§º‡§æ ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø!', 
      or: '‡¨´‡¨æ‡¨á‡¨¨‡¨∞‡¨∞‡≠Å ‡¨ï‡¨™‡¨°‡¨º‡¨æ ‡¨™‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü‡¨®‡≠ç‡¨§ ‡¨Ø‡¨æ‡¨§‡≠ç‡¨∞‡¨æ - ‡¨∏‡≠Ç‡¨§‡¨æ ‡¨ï‡¨æ‡¨ü‡¨ø‡¨¨‡¨æ, ‡¨¨‡≠Å‡¨£‡¨ø‡¨¨‡¨æ ‡¨è‡¨¨‡¨Ç ‡¨¨‡¨∏‡≠ç‡¨§‡≠ç‡¨∞ ‡¨¶‡≠Å‡¨É‡¨∏‡¨æ‡¨π‡¨∏‡¨ø‡¨ï ‡¨ï‡¨æ‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü!' 
    },
    icon: Compass,
    color: 'from-purple-600 to-pink-600',
    difficulty: 'beginner',
    xpReward: 160,
    estimatedTime: 25,
    isUnlocked: true,
    progress: 0,
    position: { x: 70, y: 15 },
    glowColor: 'rgba(147, 51, 234, 0.6)',
    subGames: [
      { id: 'cotton-journey', name: { en: 'Cotton to Cloth', hi: '‡§ï‡§™‡§æ‡§∏ ‡§∏‡•á ‡§ï‡§™‡§°‡§º‡§æ', or: '‡¨ï‡¨™‡¨æ‡¨∏‡¨∞‡≠Å ‡¨ï‡¨™‡¨°‡¨º‡¨æ' }, type: 'game' },
      { id: 'weaving-wizard', name: { en: 'Weaving Wizard', hi: '‡§¨‡•Å‡§®‡§æ‡§à ‡§ú‡§æ‡§¶‡•Ç‡§ó‡§∞', or: '‡¨¨‡≠Å‡¨£‡¨æ ‡¨Ø‡¨æ‡¨¶‡≠Å‡¨ó‡¨∞' }, type: 'puzzle' },
      { id: 'fabric-explorer', name: { en: 'Fabric Explorer', hi: '‡§ï‡§™‡§°‡§º‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§ï', or: '‡¨ï‡¨™‡¨°‡¨º‡¨æ ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨ï' }, type: 'challenge' }
    ]
  },
  {
    id: 'sorting-materials',
    name: { 
      en: 'Material Detective', 
      hi: '‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ú‡§æ‡§∏‡•Ç‡§∏', 
      or: '‡¨∏‡¨æ‡¨Æ‡¨ó‡≠ç‡¨∞‡≠Ä ‡¨ó‡≠Å‡¨™‡≠ç‡¨§‡¨ö‡¨∞' 
    },
    description: { 
      en: 'Solve mysteries by sorting objects based on their amazing properties!', 
      hi: '‡§Ö‡§™‡§®‡•á ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§ó‡•Å‡§£‡•ã‡§Ç ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§µ‡§∏‡•ç‡§§‡•Å‡§ì‡§Ç ‡§ï‡•ã ‡§õ‡§æ‡§Ç‡§ü‡§ï‡§∞ ‡§∞‡§π‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Å‡§≤‡§ù‡§æ‡§è‡§Ç!', 
      or: '‡¨∏‡≠á‡¨Æ‡¨æ‡¨®‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨Ü‡¨∂‡≠ç‡¨ö‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü‡¨ú‡¨®‡¨ï ‡¨ó‡≠Å‡¨£ ‡¨Ü‡¨ß‡¨æ‡¨∞‡¨∞‡≠á ‡¨¨‡¨∏‡≠ç‡¨§‡≠Å‡¨ó‡≠Å‡¨°‡¨º‡¨ø‡¨ï‡≠Å ‡¨∏‡¨ú‡¨æ‡¨á ‡¨∞‡¨π‡¨∏‡≠ç‡≠ü ‡¨∏‡¨Æ‡¨æ‡¨ß‡¨æ‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Beaker,
    color: 'from-blue-600 to-cyan-600',
    difficulty: 'intermediate',
    xpReward: 190,
    estimatedTime: 30,
    isUnlocked: true,
    progress: 40,
    position: { x: 25, y: 40 },
    glowColor: 'rgba(37, 99, 235, 0.6)',
    subGames: [
      { id: 'property-patrol', name: { en: 'Property Patrol', hi: '‡§ó‡•Å‡§£ ‡§ó‡§∂‡•ç‡§§', or: '‡¨ó‡≠Å‡¨£ ‡¨™‡¨æ‡¨ü‡≠ç‡¨∞‡≠ã‡¨≤‡≠ç' }, type: 'game' },
      { id: 'hardness-hunter', name: { en: 'Hardness Hunter', hi: '‡§ï‡§†‡•ã‡§∞‡§§‡§æ ‡§∂‡§ø‡§ï‡§æ‡§∞‡•Ä', or: '‡¨ï‡¨†‡¨ø‡¨®‡¨§‡¨æ ‡¨∂‡¨ø‡¨ï‡¨æ‡¨∞‡≠Ä' }, type: 'puzzle' },
      { id: 'transparency-test', name: { en: 'Transparency Test', hi: '‡§™‡§æ‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ', or: '‡¨∏‡≠ç‡≠±‡¨ö‡≠ç‡¨õ‡¨§‡¨æ ‡¨™‡¨∞‡≠Ä‡¨ï‡≠ç‡¨∑‡¨æ' }, type: 'challenge' }
    ]
  },
  {
    id: 'separation-methods',
    name: { 
      en: 'Separation Station', 
      hi: '‡§Ö‡§≤‡§ó‡§æ‡§µ ‡§∏‡•ç‡§ü‡•á‡§∂‡§®', 
      or: '‡¨™‡≠É‡¨•‡¨ï‡≠Ä‡¨ï‡¨∞‡¨£ ‡¨∑‡≠ç‡¨ü‡≠á‡¨∏‡¨®‡≠ç' 
    },
    description: { 
      en: 'Master the art of separation using scientific methods and techniques!', 
      hi: '‡§µ‡•à‡§ú‡•ç‡§û‡§æ‡§®‡§ø‡§ï ‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§Ö‡§≤‡§ó‡§æ‡§µ ‡§ï‡•Ä ‡§ï‡§≤‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§æ‡§∞‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨¨‡≠à‡¨ú‡≠ç‡¨û‡¨æ‡¨®‡¨ø‡¨ï ‡¨™‡¨¶‡≠ç‡¨ß‡¨§‡¨ø ‡¨è‡¨¨‡¨Ç ‡¨ï‡≠å‡¨∂‡¨≥ ‡¨¨‡≠ç‡≠ü‡¨¨‡¨π‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨ø ‡¨™‡≠É‡¨•‡¨ï‡≠Ä‡¨ï‡¨∞‡¨£‡¨∞ ‡¨ï‡¨≥‡¨æ‡¨∞‡≠á ‡¨¶‡¨ï‡≠ç‡¨∑‡¨§‡¨æ ‡¨Ö‡¨∞‡≠ç‡¨ú‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: FlaskConical,
    color: 'from-orange-600 to-red-600',
    difficulty: 'intermediate',
    xpReward: 210,
    estimatedTime: 35,
    isUnlocked: true,
    progress: 20,
    position: { x: 55, y: 45 },
    glowColor: 'rgba(234, 88, 12, 0.6)',
    subGames: [
      { id: 'sieving-simulator', name: { en: 'Sieving Simulator', hi: '‡§õ‡§æ‡§®‡§®‡§æ ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§ü‡§∞', or: '‡¨õ‡¨æ‡¨£‡¨ø‡¨¨‡¨æ ‡¨∏‡¨ø‡¨Æ‡≠Å‡¨≤‡≠á‡¨ü‡¨∞‡≠ç' }, type: 'game' },
      { id: 'filtration-factory', name: { en: 'Filtration Factory', hi: '‡§®‡§ø‡§∏‡•ç‡§™‡§Ç‡§¶‡§® ‡§ï‡§æ‡§∞‡§ñ‡§æ‡§®‡§æ', or: '‡¨™‡¨∞‡¨ø‡¨∏‡≠ç‡¨∞‡¨æ‡¨¨‡¨£ ‡¨ï‡¨æ‡¨∞‡¨ñ‡¨æ‡¨®‡¨æ' }, type: 'puzzle' },
      { id: 'evaporation-expert', name: { en: 'Evaporation Expert', hi: '‡§µ‡§æ‡§∑‡•ç‡§™‡•Ä‡§ï‡§∞‡§£ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û', or: '‡¨¨‡¨æ‡¨∑‡≠ç‡¨™‡≠Ä‡¨ï‡¨∞‡¨£ ‡¨¨‡¨ø‡¨∂‡≠á‡¨∑‡¨ú‡≠ç‡¨û' }, type: 'challenge' }
    ]
  },
  {
    id: 'changes-around-us',
    name: { 
      en: 'Change Champions', 
      hi: '‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§ö‡•à‡§Ç‡§™‡§ø‡§Ø‡§®', 
      or: '‡¨™‡¨∞‡¨ø‡¨¨‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨® ‡¨ö‡¨æ‡¨Æ‡≠ç‡¨™‡¨ø‡¨Ö‡¨®‡≠ç' 
    },
    description: { 
      en: 'Discover reversible and irreversible changes in the transformation arena!', 
      hi: '‡§∞‡•Ç‡§™‡§æ‡§Ç‡§§‡§∞‡§£ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§â‡§≤‡§ü‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§î‡§∞ ‡§Ö‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®‡•Ä‡§Ø ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨∞‡≠Ç‡¨™‡¨æ‡¨®‡≠ç‡¨§‡¨∞‡¨£ ‡¨ï‡≠ç‡¨∑‡≠á‡¨§‡≠ç‡¨∞‡¨∞‡≠á ‡¨â‡¨≤‡¨ü‡¨æ ‡¨è‡¨¨‡¨Ç ‡¨Ö‡¨¶‡≠ç‡¨∞‡≠Å‡¨§ ‡¨™‡¨∞‡¨ø‡¨¨‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨® ‡¨Ü‡¨¨‡¨ø‡¨∑‡≠ç‡¨ï‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Atom,
    color: 'from-indigo-600 to-purple-600',
    difficulty: 'intermediate',
    xpReward: 200,
    estimatedTime: 30,
    isUnlocked: false,
    progress: 0,
    position: { x: 80, y: 35 },
    glowColor: 'rgba(99, 102, 241, 0.6)',
    subGames: [
      { id: 'reversible-lab', name: { en: 'Reversible Lab', hi: '‡§∞‡§ø‡§µ‡§∞‡•ç‡§∏‡§ø‡§¨‡§≤ ‡§≤‡•à‡§¨', or: '‡¨∞‡¨ø‡¨≠‡¨∞‡≠ç‡¨∏‡¨ø‡¨¨‡¨≤‡≠ç ‡¨≤‡≠ç‡≠ü‡¨æ‡¨¨‡≠ç' }, type: 'game' },
      { id: 'chemical-kitchen', name: { en: 'Chemical Kitchen', hi: '‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§∞‡§∏‡•ã‡§à', or: '‡¨∞‡¨æ‡¨∏‡¨æ‡≠ü‡¨®‡¨ø‡¨ï ‡¨∞‡≠ã‡¨∑‡≠á‡¨á' }, type: 'puzzle' },
      { id: 'transformation-tower', name: { en: 'Transformation Tower', hi: '‡§∞‡•Ç‡§™‡§æ‡§Ç‡§§‡§∞‡§£ ‡§ü‡•â‡§µ‡§∞', or: '‡¨∞‡≠Ç‡¨™‡¨æ‡¨®‡≠ç‡¨§‡¨∞‡¨£ ‡¨ü‡¨æ‡≠±‡¨æ‡¨∞' }, type: 'challenge' }
    ]
  },
  {
    id: 'plant-parts',
    name: { 
      en: 'Plant Planet', 
      hi: '‡§™‡•å‡§ß‡§æ ‡§ó‡•ç‡§∞‡§π', 
      or: '‡¨â‡¨¶‡≠ç‡¨≠‡¨ø‡¨¶ ‡¨ó‡≠ç‡¨∞‡¨π' 
    },
    description: { 
      en: 'Explore the wonderful world of herbs, shrubs, trees, and plant functions!', 
      hi: '‡§ú‡§°‡§º‡•Ä-‡§¨‡•Ç‡§ü‡§ø‡§Ø‡•ã‡§Ç, ‡§ù‡§æ‡§°‡§º‡§ø‡§Ø‡•ã‡§Ç, ‡§™‡•á‡§°‡§º‡•ã‡§Ç ‡§î‡§∞ ‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•á ‡§ï‡§æ‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨î‡¨∑‡¨ß‡≠Ä‡≠ü ‡¨ó‡¨õ, ‡¨ù‡¨æ‡¨°‡¨º, ‡¨ó‡¨õ ‡¨è‡¨¨‡¨Ç ‡¨â‡¨¶‡≠ç‡¨≠‡¨ø‡¨¶ ‡¨ï‡¨æ‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü‡¨∞ ‡¨Ü‡¨∂‡≠ç‡¨ö‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü‡¨ú‡¨®‡¨ï ‡¨¶‡≠Å‡¨®‡¨ø‡¨Ü ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Leaf,
    color: 'from-green-600 to-lime-600',
    difficulty: 'intermediate',
    xpReward: 220,
    estimatedTime: 35,
    isUnlocked: false,
    progress: 0,
    position: { x: 15, y: 65 },
    glowColor: 'rgba(34, 197, 94, 0.6)',
    subGames: [
      { id: 'plant-explorer', name: { en: 'Plant Explorer', hi: '‡§™‡•å‡§ß‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§ï', or: '‡¨â‡¨¶‡≠ç‡¨≠‡¨ø‡¨¶ ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨ï' }, type: 'game' },
      { id: 'photosynthesis-factory', name: { en: 'Photosynthesis Factory', hi: '‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ ‡§∏‡§Ç‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§æ‡§∞‡§ñ‡§æ‡§®‡§æ', or: '‡¨Ü‡¨≤‡≠ã‡¨ï ‡¨∏‡¨Ç‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£ ‡¨ï‡¨æ‡¨∞‡¨ñ‡¨æ‡¨®‡¨æ' }, type: 'puzzle' },
      { id: 'root-stem-leaf', name: { en: 'Root-Stem-Leaf Adventure', hi: '‡§ú‡§°‡§º-‡§§‡§®‡§æ-‡§™‡§§‡•ç‡§§‡•Ä ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï', or: '‡¨Æ‡≠Ç‡¨≥-‡¨ó‡¨£‡≠ç‡¨°‡¨ø-‡¨™‡¨§‡≠ç‡¨∞ ‡¨¶‡≠Å‡¨É‡¨∏‡¨æ‡¨π‡¨∏‡¨ø‡¨ï' }, type: 'challenge' }
    ]
  },
  {
    id: 'body-movements',
    name: { 
      en: 'Movement Mechanics', 
      hi: '‡§ó‡§§‡§ø ‡§Ø‡§æ‡§Ç‡§§‡•ç‡§∞‡§ø‡§ï‡•Ä', 
      or: '‡¨ó‡¨§‡¨ø ‡¨Ø‡¨æ‡¨®‡≠ç‡¨§‡≠ç‡¨∞‡¨ø‡¨ï‡¨§‡¨æ' 
    },
    description: { 
      en: 'Discover how humans and animals move using bones, joints, and muscles!', 
      hi: '‡§ú‡§æ‡§®‡•á‡§Ç ‡§ï‡§ø ‡§π‡§°‡•ç‡§°‡§ø‡§Ø‡•ã‡§Ç, ‡§ú‡•ã‡§°‡§º‡•ã‡§Ç ‡§î‡§∞ ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§Æ‡§®‡•Å‡§∑‡•ç‡§Ø ‡§î‡§∞ ‡§ú‡§æ‡§®‡§µ‡§∞ ‡§ï‡•à‡§∏‡•á ‡§ö‡§≤‡§§‡•á ‡§π‡•à‡§Ç!', 
      or: '‡¨π‡¨æ‡¨°, ‡¨ó‡¨£‡≠ç‡¨†‡¨ø ‡¨è‡¨¨‡¨Ç ‡¨Æ‡¨æ‡¨Ç‡¨∏‡¨™‡≠á‡¨∂‡≠Ä ‡¨¨‡≠ç‡≠ü‡¨¨‡¨π‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨ø ‡¨Æ‡¨£‡¨ø‡¨∑ ‡¨è‡¨¨‡¨Ç ‡¨™‡¨∂‡≠Å‡¨Æ‡¨æ‡¨®‡≠á ‡¨ï‡¨ø‡¨™‡¨∞‡¨ø ‡¨ó‡¨§‡¨ø ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡¨ø ‡¨Ü‡¨¨‡¨ø‡¨∑‡≠ç‡¨ï‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: User,
    color: 'from-rose-600 to-pink-600',
    difficulty: 'intermediate',
    xpReward: 190,
    estimatedTime: 30,
    isUnlocked: false,
    progress: 0,
    position: { x: 40, y: 70 },
    glowColor: 'rgba(244, 63, 94, 0.6)',
    subGames: [
      { id: 'skeleton-builder', name: { en: 'Skeleton Builder', hi: '‡§ï‡§Ç‡§ï‡§æ‡§≤ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§§‡§æ', or: '‡¨ï‡¨ô‡≠ç‡¨ï‡¨æ‡¨≥ ‡¨®‡¨ø‡¨∞‡≠ç‡¨Æ‡¨æ‡¨§‡¨æ' }, type: 'game' },
      { id: 'joint-journey', name: { en: 'Joint Journey', hi: '‡§∏‡§Ç‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ', or: '‡¨ó‡¨£‡≠ç‡¨†‡¨ø ‡¨Ø‡¨æ‡¨§‡≠ç‡¨∞‡¨æ' }, type: 'puzzle' },
      { id: 'animal-locomotion', name: { en: 'Animal Locomotion Lab', hi: '‡§™‡§∂‡•Å ‡§ó‡§§‡§ø ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≤‡§æ', or: '‡¨™‡¨∂‡≠Å ‡¨ó‡¨§‡¨ø ‡¨≤‡¨æ‡¨¨‡≠ã‡¨∞‡≠á‡¨ü‡≠ã‡¨∞‡≠Ä' }, type: 'challenge' }
    ]
  },
  {
    id: 'living-organisms',
    name: { 
      en: 'Life Laboratory', 
      hi: '‡§ú‡•Ä‡§µ‡§® ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≤‡§æ', 
      or: '‡¨ú‡≠Ä‡¨¨‡¨® ‡¨≤‡¨æ‡¨¨‡≠ã‡¨∞‡≠á‡¨ü‡≠ã‡¨∞‡≠Ä' 
    },
    description: { 
      en: 'Study living organisms, their habitats, and amazing adaptations!', 
      hi: '‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§ú‡•Ä‡§µ‡•ã‡§Ç, ‡§â‡§®‡§ï‡•á ‡§Ü‡§µ‡§æ‡§∏‡•ã‡§Ç ‡§î‡§∞ ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§® ‡§ï‡§æ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨ú‡≠Ä‡¨¨‡¨ø‡¨§ ‡¨ú‡≠Ä‡¨¨, ‡¨∏‡≠á‡¨Æ‡¨æ‡¨®‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨¨‡¨æ‡¨∏‡¨∏‡≠ç‡¨•‡¨æ‡¨® ‡¨è‡¨¨‡¨Ç ‡¨Ü‡¨∂‡≠ç‡¨ö‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü‡¨ú‡¨®‡¨ï ‡¨Ö‡¨®‡≠Å‡¨ï‡≠Ç‡¨≥‡¨® ‡¨Ö‡¨ß‡≠ç‡≠ü‡≠ü‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Fish,
    color: 'from-teal-600 to-cyan-600',
    difficulty: 'intermediate',
    xpReward: 240,
    estimatedTime: 40,
    isUnlocked: false,
    progress: 0,
    position: { x: 65, y: 70 },
    glowColor: 'rgba(20, 184, 166, 0.6)',
    subGames: [
      { id: 'habitat-explorer', name: { en: 'Habitat Explorer', hi: '‡§Ü‡§µ‡§æ‡§∏ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§ï', or: '‡¨¨‡¨æ‡¨∏‡¨∏‡≠ç‡¨•‡¨æ‡¨® ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨ï' }, type: 'game' },
      { id: 'adaptation-adventure', name: { en: 'Adaptation Adventure', hi: '‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§® ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï', or: '‡¨Ö‡¨®‡≠Å‡¨ï‡≠Ç‡¨≥‡¨® ‡¨¶‡≠Å‡¨É‡¨∏‡¨æ‡¨π‡¨∏‡¨ø‡¨ï' }, type: 'puzzle' },
      { id: 'life-characteristics', name: { en: 'Life Characteristics', hi: '‡§ú‡•Ä‡§µ‡§® ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç', or: '‡¨ú‡≠Ä‡¨¨‡¨® ‡¨¨‡¨ø‡¨∂‡≠á‡¨∑‡¨§‡¨æ' }, type: 'challenge' }
    ]
  },
  {
    id: 'motion-measurement',
    name: { 
      en: 'Motion Metropolis', 
      hi: '‡§ó‡§§‡§ø ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞', 
      or: '‡¨ó‡¨§‡¨ø ‡¨Æ‡¨π‡¨æ‡¨®‡¨ó‡¨∞' 
    },
    description: { 
      en: 'Journey through different types of motion and master measurement!', 
      hi: '‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§ó‡§§‡§ø ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡§æ‡§™ ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§æ‡§∞‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨¨‡¨ø‡¨≠‡¨ø‡¨®‡≠ç‡¨® ‡¨™‡≠ç‡¨∞‡¨ï‡¨æ‡¨∞ ‡¨ó‡¨§‡¨ø ‡¨Æ‡¨æ‡¨ß‡≠ç‡≠ü‡¨Æ‡¨∞‡≠á ‡¨Ø‡¨æ‡¨§‡≠ç‡¨∞‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å ‡¨è‡¨¨‡¨Ç ‡¨Æ‡¨æ‡¨™‡¨∞‡≠á ‡¨¶‡¨ï‡≠ç‡¨∑‡¨§‡¨æ ‡¨Ö‡¨∞‡≠ç‡¨ú‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Gauge,
    color: 'from-amber-600 to-orange-600',
    difficulty: 'intermediate',
    xpReward: 200,
    estimatedTime: 30,
    isUnlocked: false,
    progress: 0,
    position: { x: 85, y: 60 },
    glowColor: 'rgba(245, 158, 11, 0.6)',
    subGames: [
      { id: 'transport-timeline', name: { en: 'Transport Timeline', hi: '‡§™‡§∞‡§ø‡§µ‡§π‡§® ‡§∏‡§Æ‡§Ø‡§∞‡•á‡§ñ‡§æ', or: '‡¨™‡¨∞‡¨ø‡¨¨‡¨π‡¨® ‡¨∏‡¨Æ‡≠ü‡¨∏‡≠Ä‡¨Æ‡¨æ' }, type: 'game' },
      { id: 'measurement-master', name: { en: 'Measurement Master', hi: '‡§Æ‡§æ‡§™ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞', or: '‡¨Æ‡¨æ‡¨™ ‡¨Æ‡¨æ‡¨∑‡≠ç‡¨ü‡¨∞' }, type: 'puzzle' },
      { id: 'motion-types', name: { en: 'Motion Types Arena', hi: '‡§ó‡§§‡§ø ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞', or: '‡¨ó‡¨§‡¨ø ‡¨™‡≠ç‡¨∞‡¨ï‡¨æ‡¨∞ ‡¨ï‡≠ç‡¨∑‡≠á‡¨§‡≠ç‡¨∞' }, type: 'challenge' }
    ]
  },
  {
    id: 'light-shadows',
    name: { 
      en: 'Light Laboratory', 
      hi: '‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≤‡§æ', 
      or: '‡¨Ü‡¨≤‡≠ã‡¨ï ‡¨≤‡¨æ‡¨¨‡≠ã‡¨∞‡≠á‡¨ü‡≠ã‡¨∞‡≠Ä' 
    },
    description: { 
      en: 'Explore light, shadows, reflections, and the amazing pinhole camera!', 
      hi: '‡§™‡•ç‡§∞‡§ï‡§æ‡§∂, ‡§õ‡§æ‡§Ø‡§æ, ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§ø‡§Ç‡§¨ ‡§î‡§∞ ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§™‡§ø‡§®‡§π‡•ã‡§≤ ‡§ï‡•à‡§Æ‡§∞‡•á ‡§ï‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨Ü‡¨≤‡≠ã‡¨ï, ‡¨õ‡¨æ‡≠ü‡¨æ, ‡¨™‡≠ç‡¨∞‡¨§‡¨ø‡¨´‡¨≥‡¨® ‡¨è‡¨¨‡¨Ç ‡¨Ü‡¨∂‡≠ç‡¨ö‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü‡¨ú‡¨®‡¨ï ‡¨™‡¨ø‡¨®‡≠ç‡¨π‡≠ã‡¨≤‡≠ç ‡¨ï‡≠ç‡≠ü‡¨æ‡¨Æ‡≠á‡¨∞‡¨æ ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Sun,
    color: 'from-yellow-600 to-orange-600',
    difficulty: 'advanced',
    xpReward: 250,
    estimatedTime: 40,
    isUnlocked: false,
    progress: 0,
    position: { x: 20, y: 90 },
    glowColor: 'rgba(234, 179, 8, 0.6)',
    subGames: [
      { id: 'shadow-theater', name: { en: 'Shadow Theater', hi: '‡§õ‡§æ‡§Ø‡§æ ‡§∞‡§Ç‡§ó‡§Æ‡§Ç‡§ö', or: '‡¨õ‡¨æ‡≠ü‡¨æ ‡¨•‡¨ø‡¨è‡¨ü‡¨∞' }, type: 'game' },
      { id: 'reflection-realm', name: { en: 'Reflection Realm', hi: '‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§ø‡§Ç‡§¨ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞', or: '‡¨™‡≠ç‡¨∞‡¨§‡¨ø‡¨´‡¨≥‡¨® ‡¨ï‡≠ç‡¨∑‡≠á‡¨§‡≠ç‡¨∞' }, type: 'puzzle' },
      { id: 'pinhole-photographer', name: { en: 'Pinhole Photographer', hi: '‡§™‡§ø‡§®‡§π‡•ã‡§≤ ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡§∞', or: '‡¨™‡¨ø‡¨®‡≠ç‡¨π‡≠ã‡¨≤‡≠ç ‡¨´‡¨ü‡≠ã‡¨ó‡≠ç‡¨∞‡¨æ‡¨´‡¨∞' }, type: 'challenge' }
    ]
  },
  {
    id: 'electricity-circuits',
    name: { 
      en: 'Electric Empire', 
      hi: '‡§µ‡§ø‡§¶‡•ç‡§Ø‡•Å‡§§ ‡§∏‡§æ‡§Æ‡•ç‡§∞‡§æ‡§ú‡•ç‡§Ø', 
      or: '‡¨¨‡¨ø‡¨¶‡≠ç‡≠ü‡≠Å‡¨§‡≠ç ‡¨∏‡¨æ‡¨Æ‡≠ç‡¨∞‡¨æ‡¨ú‡≠ç‡≠ü' 
    },
    description: { 
      en: 'Build circuits, discover conductors, and master electrical concepts!', 
      hi: '‡§∏‡§∞‡•ç‡§ï‡§ø‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç, ‡§ï‡§Ç‡§°‡§ï‡•ç‡§ü‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç ‡§î‡§∞ ‡§µ‡§ø‡§¶‡•ç‡§Ø‡•Å‡§§ ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§æ‡§∞‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨∏‡¨∞‡≠ç‡¨ï‡¨ø‡¨ü ‡¨®‡¨ø‡¨∞‡≠ç‡¨Æ‡¨æ‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å, ‡¨ï‡¨£‡≠ç‡¨°‡¨ï‡≠ç‡¨ü‡¨∞ ‡¨Ü‡¨¨‡¨ø‡¨∑‡≠ç‡¨ï‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å ‡¨è‡¨¨‡¨Ç ‡¨¨‡¨ø‡¨¶‡≠ç‡≠ü‡≠Å‡¨§‡≠ç ‡¨ß‡¨æ‡¨∞‡¨£‡¨æ‡¨∞‡≠á ‡¨¶‡¨ï‡≠ç‡¨∑‡¨§‡¨æ ‡¨Ö‡¨∞‡≠ç‡¨ú‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Zap,
    color: 'from-blue-600 to-indigo-600',
    difficulty: 'advanced',
    xpReward: 280,
    estimatedTime: 45,
    isUnlocked: false,
    progress: 0,
    position: { x: 50, y: 85 },
    glowColor: 'rgba(37, 99, 235, 0.6)',
    subGames: [
      { id: 'circuit-builder', name: { en: 'Circuit Builder', hi: '‡§∏‡§∞‡•ç‡§ï‡§ø‡§ü ‡§¨‡§ø‡§≤‡•ç‡§°‡§∞', or: '‡¨∏‡¨∞‡≠ç‡¨ï‡¨ø‡¨ü ‡¨¨‡¨ø‡¨≤‡≠ç‡¨°‡¨∞' }, type: 'game' },
      { id: 'conductor-detective', name: { en: 'Conductor Detective', hi: '‡§ï‡§Ç‡§°‡§ï‡•ç‡§ü‡§∞ ‡§ú‡§æ‡§∏‡•Ç‡§∏', or: '‡¨ï‡¨£‡≠ç‡¨°‡¨ï‡≠ç‡¨ü‡¨∞ ‡¨ó‡≠Å‡¨™‡≠ç‡¨§‡¨ö‡¨∞' }, type: 'puzzle' },
      { id: 'electric-safety', name: { en: 'Electric Safety Zone', hi: '‡§µ‡§ø‡§¶‡•ç‡§Ø‡•Å‡§§ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞', or: '‡¨¨‡¨ø‡¨¶‡≠ç‡≠ü‡≠Å‡¨§‡≠ç ‡¨∏‡≠Å‡¨∞‡¨ï‡≠ç‡¨∑‡¨æ ‡¨ï‡≠ç‡¨∑‡≠á‡¨§‡≠ç‡¨∞' }, type: 'challenge' }
    ]
  },
  {
    id: 'magnets',
    name: { 
      en: 'Magnetic Kingdom', 
      hi: '‡§ö‡•Å‡§Ç‡§¨‡§ï‡•Ä‡§Ø ‡§∞‡§æ‡§ú‡•ç‡§Ø', 
      or: '‡¨ö‡≠Å‡¨Æ‡≠ç‡¨¨‡¨ï‡≠Ä‡≠ü ‡¨∞‡¨æ‡¨ú‡≠ç‡≠ü' 
    },
    description: { 
      en: 'Discover the mysterious world of magnets, poles, and magnetic forces!', 
      hi: '‡§ö‡•Å‡§Ç‡§¨‡§ï, ‡§ß‡•ç‡§∞‡•Å‡§µ‡•ã‡§Ç ‡§î‡§∞ ‡§ö‡•Å‡§Ç‡§¨‡§ï‡•Ä‡§Ø ‡§¨‡§≤‡•ã‡§Ç ‡§ï‡•Ä ‡§∞‡§π‡§∏‡•ç‡§Ø‡§Æ‡§Ø ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨ö‡≠Å‡¨Æ‡≠ç‡¨¨‡¨ï, ‡¨™‡≠ã‡¨≤ ‡¨è‡¨¨‡¨Ç ‡¨ö‡≠Å‡¨Æ‡≠ç‡¨¨‡¨ï‡≠Ä‡≠ü ‡¨∂‡¨ï‡≠ç‡¨§‡¨ø‡¨∞ ‡¨∞‡¨π‡¨∏‡≠ç‡≠ü‡¨Æ‡≠ü ‡¨¶‡≠Å‡¨®‡¨ø‡¨Ü ‡¨Ü‡¨¨‡¨ø‡¨∑‡≠ç‡¨ï‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Magnet,
    color: 'from-red-600 to-pink-600',
    difficulty: 'advanced',
    xpReward: 220,
    estimatedTime: 35,
    isUnlocked: false,
    progress: 0,
    position: { x: 75, y: 90 },
    glowColor: 'rgba(220, 38, 38, 0.6)',
    subGames: [
      { id: 'magnetic-explorer', name: { en: 'Magnetic Explorer', hi: '‡§ö‡•Å‡§Ç‡§¨‡§ï‡•Ä‡§Ø ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§ï', or: '‡¨ö‡≠Å‡¨Æ‡≠ç‡¨¨‡¨ï‡≠Ä‡≠ü ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨ï' }, type: 'game' },
      { id: 'compass-navigator', name: { en: 'Compass Navigator', hi: '‡§ï‡§Ç‡§™‡§æ‡§∏ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü‡§∞', or: '‡¨ï‡¨Æ‡≠ç‡¨™‡¨æ‡¨∏‡≠ç ‡¨®‡≠á‡¨≠‡¨ø‡¨ó‡≠á‡¨ü‡¨∞‡≠ç' }, type: 'puzzle' },
      { id: 'pole-power', name: { en: 'Pole Power Challenge', hi: '‡§ß‡•ç‡§∞‡•Å‡§µ ‡§∂‡§ï‡•ç‡§§‡§ø ‡§ö‡•Å‡§®‡•å‡§§‡•Ä', or: '‡¨™‡≠ã‡¨≤ ‡¨∂‡¨ï‡≠ç‡¨§‡¨ø ‡¨ö‡≠Å‡¨®‡≠å‡¨§‡¨ø' }, type: 'challenge' }
    ]
  },
  {
    id: 'water-cycle',
    name: { 
      en: 'Water World', 
      hi: '‡§ú‡§≤ ‡§∏‡§Ç‡§∏‡§æ‡§∞', 
      or: '‡¨ú‡¨≥ ‡¨∏‡¨Ç‡¨∏‡¨æ‡¨∞' 
    },
    description: { 
      en: 'Journey through the water cycle, conservation, and aquatic adventures!', 
      hi: '‡§ú‡§≤ ‡§ö‡§ï‡•ç‡§∞, ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§ú‡§≤‡•Ä‡§Ø ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨ú‡¨≥ ‡¨ö‡¨ï‡≠ç‡¨∞, ‡¨∏‡¨Ç‡¨∞‡¨ï‡≠ç‡¨∑‡¨£ ‡¨è‡¨¨‡¨Ç ‡¨ú‡¨≥‡≠Ä‡≠ü ‡¨¶‡≠Å‡¨É‡¨∏‡¨æ‡¨π‡¨∏‡¨ø‡¨ï ‡¨ï‡¨æ‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü ‡¨Æ‡¨æ‡¨ß‡≠ç‡≠ü‡¨Æ‡¨∞‡≠á ‡¨Ø‡¨æ‡¨§‡≠ç‡¨∞‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Droplet,
    color: 'from-cyan-600 to-blue-600',
    difficulty: 'advanced',
    xpReward: 200,
    estimatedTime: 35,
    isUnlocked: false,
    progress: 0,
    position: { x: 90, y: 80 },
    glowColor: 'rgba(8, 145, 178, 0.6)',
    subGames: [
      { id: 'water-cycle-journey', name: { en: 'Water Cycle Journey', hi: '‡§ú‡§≤ ‡§ö‡§ï‡•ç‡§∞ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ', or: '‡¨ú‡¨≥ ‡¨ö‡¨ï‡≠ç‡¨∞ ‡¨Ø‡¨æ‡¨§‡≠ç‡¨∞‡¨æ' }, type: 'game' },
      { id: 'conservation-hero', name: { en: 'Conservation Hero', hi: '‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§®‡§æ‡§Ø‡§ï', or: '‡¨∏‡¨Ç‡¨∞‡¨ï‡≠ç‡¨∑‡¨£ ‡¨π‡¨ø‡¨∞‡≠ã' }, type: 'puzzle' },
      { id: 'drought-flood', name: { en: 'Drought & Flood Manager', hi: '‡§∏‡•Ç‡§ñ‡§æ ‡§î‡§∞ ‡§¨‡§æ‡§¢‡§º ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ï', or: '‡¨Æ‡¨∞‡≠Å‡¨°‡¨º‡¨ø ‡¨è‡¨¨‡¨Ç ‡¨¨‡¨®‡≠ç‡≠ü‡¨æ ‡¨™‡¨∞‡¨ø‡¨ö‡¨æ‡¨≥‡¨ï' }, type: 'challenge' }
    ]
  },
  {
    id: 'air-atmosphere',
    name: { 
      en: 'Atmosphere Academy', 
      hi: '‡§µ‡§æ‡§Ø‡•Å‡§Æ‡§Ç‡§°‡§≤ ‡§Ö‡§ï‡§æ‡§¶‡§Æ‡•Ä', 
      or: '‡¨¨‡¨æ‡≠ü‡≠Å‡¨Æ‡¨£‡≠ç‡¨°‡¨≥ ‡¨è‡¨ï‡¨æ‡¨°‡≠á‡¨Æ‡≠Ä' 
    },
    description: { 
      en: 'Explore air composition, oxygen supply, and atmospheric wonders!', 
      hi: '‡§π‡§µ‡§æ ‡§ï‡•Ä ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ, ‡§ë‡§ï‡•ç‡§∏‡•Ä‡§ú‡§® ‡§Ü‡§™‡•Ç‡§∞‡•ç‡§§‡§ø ‡§î‡§∞ ‡§µ‡§æ‡§Ø‡•Å‡§Æ‡§Ç‡§°‡§≤‡•Ä‡§Ø ‡§Ü‡§∂‡•ç‡§ö‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨¨‡¨æ‡≠ü‡≠Å ‡¨∏‡¨Ç‡¨∞‡¨ö‡¨®‡¨æ, ‡¨Ö‡¨Æ‡≠ç‡¨≥‡¨ú‡¨æ‡¨® ‡¨Ø‡≠ã‡¨ó‡¨æ‡¨£ ‡¨è‡¨¨‡¨Ç ‡¨¨‡¨æ‡≠ü‡≠Å‡¨Æ‡¨£‡≠ç‡¨°‡¨≥‡≠Ä‡≠ü ‡¨Ü‡¨∂‡≠ç‡¨ö‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Wind,
    color: 'from-sky-600 to-cyan-600',
    difficulty: 'advanced',
    xpReward: 190,
    estimatedTime: 30,
    isUnlocked: false,
    progress: 0,
    position: { x: 10, y: 80 },
    glowColor: 'rgba(2, 132, 199, 0.6)',
    subGames: [
      { id: 'air-explorer', name: { en: 'Air Explorer', hi: '‡§π‡§µ‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§ï', or: '‡¨¨‡¨æ‡≠ü‡≠Å ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨ï' }, type: 'game' },
      { id: 'oxygen-factory', name: { en: 'Oxygen Factory', hi: '‡§ë‡§ï‡•ç‡§∏‡•Ä‡§ú‡§® ‡§ï‡§æ‡§∞‡§ñ‡§æ‡§®‡§æ', or: '‡¨Ö‡¨Æ‡≠ç‡¨≥‡¨ú‡¨æ‡¨® ‡¨ï‡¨æ‡¨∞‡¨ñ‡¨æ‡¨®‡¨æ' }, type: 'puzzle' },
      { id: 'atmosphere-guardian', name: { en: 'Atmosphere Guardian', hi: '‡§µ‡§æ‡§Ø‡•Å‡§Æ‡§Ç‡§°‡§≤ ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§ï', or: '‡¨¨‡¨æ‡≠ü‡≠Å‡¨Æ‡¨£‡≠ç‡¨°‡¨≥ ‡¨∏‡¨Ç‡¨∞‡¨ï‡≠ç‡¨∑‡¨ï' }, type: 'challenge' }
    ]
  },
  {
    id: 'waste-management',
    name: { 
      en: 'Eco Warriors', 
      hi: '‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£ ‡§Ø‡•ã‡§¶‡•ç‡§ß‡§æ', 
      or: '‡¨™‡¨∞‡¨ø‡¨¨‡≠á‡¨∂ ‡¨Ø‡≠ã‡¨¶‡≠ç‡¨ß‡¨æ' 
    },
    description: { 
      en: 'Save the planet by mastering waste management and recycling!', 
      hi: '‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§î‡§∞ ‡§∞‡•Ä‡§∏‡§æ‡§á‡§ï‡•ç‡§≤‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§æ‡§∞‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡§ï‡•á ‡§ó‡•ç‡§∞‡§π ‡§ï‡•ã ‡§¨‡§ö‡§æ‡§è‡§Ç!', 
      or: '‡¨¨‡¨∞‡≠ç‡¨ú‡≠ç‡≠ü‡¨¨‡¨∏‡≠ç‡¨§‡≠Å ‡¨™‡¨∞‡¨ø‡¨ö‡¨æ‡¨≥‡¨®‡¨æ ‡¨è‡¨¨‡¨Ç ‡¨™‡≠Å‡¨®‡¨É‡¨ö‡¨ï‡≠ç‡¨∞‡¨£‡¨∞‡≠á ‡¨¶‡¨ï‡≠ç‡¨∑‡¨§‡¨æ ‡¨Ö‡¨∞‡≠ç‡¨ú‡¨® ‡¨ï‡¨∞‡¨ø ‡¨ó‡≠ç‡¨∞‡¨π‡¨ï‡≠Å ‡¨¨‡¨û‡≠ç‡¨ö‡¨æ‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Trash,
    color: 'from-emerald-600 to-green-600',
    difficulty: 'advanced',
    xpReward: 210,
    estimatedTime: 35,
    isUnlocked: false,
    progress: 0,
    position: { x: 35, y: 95 },
    glowColor: 'rgba(16, 185, 129, 0.6)',
    subGames: [
      { id: 'sorting-superhero', name: { en: 'Sorting Superhero', hi: '‡§õ‡§Ç‡§ü‡§æ‡§à ‡§∏‡•Å‡§™‡§∞‡§π‡•Ä‡§∞‡•ã', or: '‡¨∏‡¨∞‡≠ç‡¨ü‡¨ø‡¨Ç ‡¨∏‡≠Å‡¨™‡¨∞‡¨π‡¨ø‡¨∞‡≠ã' }, type: 'game' },
      { id: 'recycling-master', name: { en: 'Recycling Master', hi: '‡§∞‡•Ä‡§∏‡§æ‡§á‡§ï‡•ç‡§≤‡§ø‡§Ç‡§ó ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞', or: '‡¨∞‡¨ø‡¨∏‡¨æ‡¨á‡¨ï‡≠ç‡¨≤‡¨ø‡¨Ç ‡¨Æ‡¨æ‡¨∑‡≠ç‡¨ü‡¨∞' }, type: 'puzzle' },
      { id: 'vermicompost-village', name: { en: 'Vermicompost Village', hi: '‡§µ‡§∞‡•ç‡§Æ‡•Ä‡§ï‡§Ç‡§™‡•ã‡§∏‡•ç‡§ü ‡§ó‡§æ‡§Ç‡§µ', or: '‡¨≠‡¨∞‡≠ç‡¨Æ‡¨ø‡¨ï‡¨Æ‡≠ç‡¨™‡≠ã‡¨∑‡≠ç‡¨ü ‡¨ó‡¨æ‡¨Å' }, type: 'challenge' }
    ]
  }
];

export function PlanetScientia({ language, onBack, onNavigateToMission }: PlanetScientiaProps) {
  const [selectedTopic, setSelectedTopic] = useState<ScienceTopic | null>(null);
  const [isExploring, setIsExploring] = useState(false);
  const [particles, setParticles] = useState<Array<{ id: number; x: number; y: number; size: number; color: string; speed: number }>>([]);

  // Generate floating science particles
  useEffect(() => {
    const particleField = Array.from({ length: 80 }, (_, i) => ({
      id: i,
      x: Math.random() * 100,
      y: Math.random() * 100,
      size: Math.random() * 4 + 2,
      color: ['#10b981', '#3b82f6', '#8b5cf6', '#f59e0b', '#ef4444'][Math.floor(Math.random() * 5)],
      speed: Math.random() * 2 + 1
    }));
    setParticles(particleField);
  }, []);

  const handleTopicSelect = (topic: ScienceTopic) => {
    if (!topic.isUnlocked) return;
    
    // Direct navigation for lab games
    if (topic.id === 'chemistry-lab') {
      onNavigateToMission('chemistry-lab');
      return;
    } else if (topic.id === 'biology-lab') {
      onNavigateToMission('biology-lab');
      return;
    } else if (topic.id === 'engineering-lab') {
      onNavigateToMission('engineering-lab');
      return;
    }
    
    // Regular topic selection for other topics
    setSelectedTopic(topic);
    setIsExploring(true);
  };

  const handleGameSelect = (gameId: string) => {
    if (selectedTopic) {
      // Direct lab access for the new interactive labs
      if (selectedTopic.id === 'chemistry-lab') {
        onNavigateToMission('chemistry-lab');
      } else if (selectedTopic.id === 'biology-lab') {
        onNavigateToMission('biology-lab');
      } else if (selectedTopic.id === 'engineering-lab') {
        onNavigateToMission('engineering-lab');
      } else if (selectedTopic.id === 'food-components' && gameId === 'nutrient-navigator') {
        // Special handling for the existing nutrient navigator game
        onNavigateToMission('food-components');
      } else {
        onNavigateToMission(`${selectedTopic.id}-${gameId}`);
      }
    }
  };

  const getTotalProgress = () => {
    const totalTopics = SCIENCE_TOPICS.length;
    const completedProgress = SCIENCE_TOPICS.reduce((sum, topic) => sum + topic.progress, 0);
    return (completedProgress / (totalTopics * 100)) * 100;
  };

  const getUnlockedCount = () => {
    return SCIENCE_TOPICS.filter(topic => topic.isUnlocked).length;
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-900 via-teal-900 to-blue-900 relative overflow-hidden">
      {/* Scientific Background */}
      <div className="absolute inset-0">
        {/* Floating Particles */}
        {particles.map(particle => (
          <motion.div
            key={particle.id}
            className="absolute rounded-full opacity-60"
            style={{
              left: `${particle.x}%`,
              top: `${particle.y}%`,
              width: particle.size,
              height: particle.size,
              backgroundColor: particle.color
            }}
            animate={{
              y: [0, -20, 0],
              x: [0, 10, 0],
              opacity: [0.6, 0.9, 0.6],
              scale: [1, 1.2, 1]
            }}
            transition={{
              duration: 4 + Math.random() * 2,
              repeat: Infinity,
              ease: "easeInOut",
              delay: Math.random() * 2
            }}
          />
        ))}

        {/* Scientific Elements */}
        {['‚öóÔ∏è', 'üî¨', 'üß™', '‚öõÔ∏è', 'üß¨', 'üåø', 'üíß', '‚ö°', 'üî•', 'üåç'].map((symbol, i) => (
          <motion.div
            key={symbol}
            className="absolute text-white/20 text-5xl font-bold select-none pointer-events-none"
            style={{
              left: `${Math.random() * 90}%`,
              top: `${Math.random() * 90}%`
            }}
            animate={{
              y: [-15, 15, -15],
              rotate: [0, 180, 360],
              opacity: [0.1, 0.4, 0.1]
            }}
            transition={{
              duration: 12 + Math.random() * 8,
              repeat: Infinity,
              ease: "easeInOut",
              delay: i * 1.5
            }}
          >
            {symbol}
          </motion.div>
        ))}

        {/* Science Lab Equipment */}
        {[...Array(6)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute opacity-10"
            style={{
              left: `${Math.random() * 80}%`,
              top: `${Math.random() * 80}%`,
              width: `${150 + Math.random() * 200}px`,
              height: `${150 + Math.random() * 200}px`
            }}
            animate={{
              scale: [1, 1.1, 1],
              rotate: [0, 360],
              opacity: [0.05, 0.15, 0.05]
            }}
            transition={{
              duration: 25 + Math.random() * 10,
              repeat: Infinity,
              ease: "linear"
            }}
          >
            <Microscope className="w-full h-full text-white" />
          </motion.div>
        ))}
      </div>

      {/* Header */}
      <div className="relative z-20 bg-black/30 backdrop-blur-md border-b border-teal-400/30">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button
                onClick={onBack}
                variant="outline"
                size="sm"
                className="bg-teal-800/80 border-teal-400 text-teal-200 hover:bg-teal-700"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                {language === 'en' ? 'Back to Universe' : language === 'hi' ? '‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§° ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏' : '‡¨¨‡≠ç‡¨∞‡¨π‡≠ç‡¨Æ‡¨æ‡¨£‡≠ç‡¨°‡¨ï‡≠Å ‡¨´‡≠á‡¨∞‡¨®‡≠ç‡¨§‡≠Å'}
              </Button>
              
              <div>
                <h1 className="text-2xl font-bold text-white flex items-center">
                  <Atom className="w-6 h-6 mr-2 text-cyan-400" />
                  {language === 'en' ? 'Planet Scientia - Scientific Discoveries' :
                   language === 'hi' ? '‡§ó‡•ç‡§∞‡§π ‡§∏‡§æ‡§á‡§Ç‡§∂‡§ø‡§Ø‡§æ - ‡§µ‡•à‡§ú‡•ç‡§û‡§æ‡§®‡§ø‡§ï ‡§ñ‡•ã‡§ú‡•á‡§Ç' :
                   '‡¨ó‡≠ç‡¨∞‡¨π ‡¨∏‡¨æ‡¨á‡¨£‡≠ç‡¨ü‡¨ø‡¨Ü - ‡¨¨‡≠à‡¨ú‡≠ç‡¨û‡¨æ‡¨®‡¨ø‡¨ï ‡¨Ü‡¨¨‡¨ø‡¨∑‡≠ç‡¨ï‡¨æ‡¨∞'}
                </h1>
                <p className="text-teal-200">
                  {language === 'en' ? 'Explore Class 6 Science through interactive experiments and adventures!' :
                   language === 'hi' ? '‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡•ã‡§Ç ‡§î‡§∞ ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§ï‡§ï‡•ç‡§∑‡§æ 6 ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç!' :
                   '‡¨á‡¨£‡≠ç‡¨ü‡¨∞‡¨æ‡¨ï‡≠ç‡¨ü‡¨ø‡¨≠‡≠ç ‡¨™‡¨∞‡≠Ä‡¨ï‡≠ç‡¨∑‡¨£ ‡¨è‡¨¨‡¨Ç ‡¨¶‡≠Å‡¨É‡¨∏‡¨æ‡¨π‡¨∏‡¨ø‡¨ï ‡¨ï‡¨æ‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü ‡¨Æ‡¨æ‡¨ß‡≠ç‡≠ü‡¨Æ‡¨∞‡≠á ‡¨ï‡¨ï‡≠ç‡¨∑‡¨æ 6 ‡¨¨‡¨ø‡¨ú‡≠ç‡¨û‡¨æ‡¨® ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!'}
                </p>
              </div>
            </div>
            
            <div className="flex items-center space-x-6">
              <div className="text-center">
                <div className="text-cyan-400 font-bold text-lg">{getUnlockedCount()}/{SCIENCE_TOPICS.length}</div>
                <div className="text-teal-200 text-sm">{language === 'en' ? 'Unlocked' : language === 'hi' ? '‡§Ö‡§®‡§≤‡•â‡§ï‡•ç‡§°' : '‡¨Ö‡¨®‡¨≤‡¨ï‡≠ç‡¨°'}</div>
              </div>
              
              <div className="text-center">
                <div className="text-green-400 font-bold text-lg">{getTotalProgress().toFixed(0)}%</div>
                <div className="text-teal-200 text-sm">{language === 'en' ? 'Progress' : language === 'hi' ? '‡§™‡•ç‡§∞‡§ó‡§§‡§ø' : '‡¨™‡≠ç‡¨∞‡¨ó‡¨§‡¨ø'}</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="relative z-10 px-6 py-8">
        <div className="max-w-7xl mx-auto">
          
          {!selectedTopic ? (
            // Topic Selection Grid
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
            >
              {SCIENCE_TOPICS.map((topic, index) => {
                const Icon = topic.icon;
                const isLocked = !topic.isUnlocked;
                
                return (
                  <motion.div
                    key={topic.id}
                    className={`relative group cursor-pointer ${isLocked ? 'opacity-60' : ''}`}
                    style={{
                      gridColumn: index % 5 === 0 ? 'span 2' : 'span 1'
                    }}
                    whileHover={!isLocked ? { scale: 1.05, y: -5 } : {}}
                    whileTap={!isLocked ? { scale: 0.95 } : {}}
                    onClick={() => handleTopicSelect(topic)}
                    layout
                  >
                    <Card className={`relative overflow-hidden h-full bg-gradient-to-br ${topic.color} border-0 shadow-2xl group-hover:shadow-3xl transition-all duration-500 ${
                      !isLocked ? 'hover:shadow-[0_0_30px_rgba(255,255,255,0.3)]' : ''
                    }`}>
                      <CardContent className="p-6 h-full flex flex-col">
                        {/* Scientific Glow Effect */}
                        {!isLocked && (
                          <motion.div
                            className="absolute inset-0 opacity-0 group-hover:opacity-30 transition-opacity duration-500"
                            style={{
                              background: `radial-gradient(circle at center, ${topic.glowColor}, transparent 70%)`
                            }}
                            animate={{
                              scale: [1, 1.2, 1],
                              opacity: [0, 0.4, 0]
                            }}
                            transition={{
                              duration: 4,
                              repeat: Infinity,
                              ease: "easeInOut"
                            }}
                          />
                        )}

                        {/* Lock Overlay */}
                        {isLocked && (
                          <div className="absolute inset-0 bg-black/50 flex items-center justify-center z-10">
                            <motion.div
                              animate={{ 
                                rotate: [0, 15, -15, 0],
                                scale: [1, 1.1, 1]
                              }}
                              transition={{ duration: 2, repeat: Infinity }}
                            >
                              <Lock className="w-12 h-12 text-white/80" />
                            </motion.div>
                          </div>
                        )}

                        <div className="flex items-start justify-between mb-4">
                          <motion.div
                            className="p-3 bg-white/20 rounded-xl backdrop-blur-sm"
                            whileHover={{ 
                              rotate: 360,
                              scale: 1.1
                            }}
                            transition={{ duration: 0.8 }}
                          >
                            <Icon className="w-8 h-8 text-white" />
                          </motion.div>

                          <div className="text-right">
                            <Badge className="bg-white/20 text-white border-white/30 mb-2">
                              {topic.difficulty === 'beginner' 
                                ? (language === 'en' ? 'Beginner' : language === 'hi' ? '‡§®‡•å‡§∏‡§ø‡§ñ‡§ø‡§Ø‡§æ' : '‡¨®‡¨¨‡¨æ‡¨ó‡¨§')
                                : topic.difficulty === 'intermediate'
                                ? (language === 'en' ? 'Intermediate' : language === 'hi' ? '‡§Æ‡§ß‡•ç‡§Ø‡§Æ' : '‡¨Æ‡¨ß‡≠ç‡≠ü‡¨Æ')
                                : (language === 'en' ? 'Advanced' : language === 'hi' ? '‡§â‡§®‡•ç‡§®‡§§' : '‡¨â‡¨®‡≠ç‡¨®‡¨§')}
                            </Badge>
                            <div className="text-white/80 text-sm">
                              ‚ö° {topic.xpReward} XP
                            </div>
                          </div>
                        </div>

                        <h3 className="text-xl font-bold text-white mb-2 group-hover:text-cyan-200 transition-colors">
                          {topic.name[language]}
                        </h3>

                        <p className="text-white/90 text-sm mb-4 flex-grow">
                          {topic.description[language]}
                        </p>

                        {/* Progress Bar */}
                        {!isLocked && (
                          <div className="space-y-2">
                            <div className="flex justify-between text-white/80 text-xs">
                              <span>{language === 'en' ? 'Progress' : language === 'hi' ? '‡§™‡•ç‡§∞‡§ó‡§§‡§ø' : '‡¨™‡≠ç‡¨∞‡¨ó‡¨§‡¨ø'}</span>
                              <span>{topic.progress}%</span>
                            </div>
                            <Progress value={topic.progress} className="h-2 bg-white/20" />
                          </div>
                        )}

                        {/* Completed Badge */}
                        {topic.progress === 100 && (
                          <motion.div
                            className="absolute top-2 left-2"
                            animate={{ 
                              scale: [1, 1.2, 1],
                              rotate: [0, 360]
                            }}
                            transition={{ duration: 2, repeat: Infinity }}
                          >
                            <CheckCircle className="w-6 h-6 text-yellow-400" />
                          </motion.div>
                        )}

                        {/* Sub-games preview */}
                        <div className="flex flex-wrap gap-1 mt-3">
                          {topic.subGames.slice(0, 3).map((game, idx) => (
                            <Badge 
                              key={game.id} 
                              variant="outline" 
                              className="text-xs bg-white/10 text-white border-white/30"
                            >
                              {game.type === 'game' ? 'üß™' : game.type === 'puzzle' ? 'üî¨' : 'üèÜ'}
                            </Badge>
                          ))}
                        </div>

                        {/* Floating scientific elements */}
                        <div className="absolute -top-4 -right-4 opacity-20">
                          <motion.div
                            animate={{ 
                              rotate: 360,
                              scale: [1, 1.1, 1]
                            }}
                            transition={{ 
                              rotate: { duration: 20, repeat: Infinity, ease: "linear" },
                              scale: { duration: 3, repeat: Infinity, ease: "easeInOut" }
                            }}
                          >
                            <Atom className="w-16 h-16 text-white" />
                          </motion.div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                );
              })}
            </motion.div>
          ) : (
            // Game Selection View
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className="space-y-8"
            >
              {/* Topic Header */}
              <div className="text-center space-y-4">
                <Button
                  onClick={() => setSelectedTopic(null)}
                  variant="outline"
                  className="mb-4 bg-teal-800/50 border-teal-400 text-teal-200"
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  {language === 'en' ? 'Back to Topics' : language === 'hi' ? '‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏' : '‡¨¨‡¨ø‡¨∑‡≠ü‡¨ó‡≠Å‡¨°‡¨º‡¨ø‡¨ï‡≠Å ‡¨´‡≠á‡¨∞‡¨®‡≠ç‡¨§‡≠Å'}
                </Button>

                <motion.div
                  className={`inline-flex items-center justify-center w-24 h-24 rounded-full bg-gradient-to-br ${selectedTopic.color} shadow-2xl mb-4`}
                  animate={{ 
                    scale: [1, 1.15, 1],
                    boxShadow: [
                      `0 0 20px ${selectedTopic.glowColor}`,
                      `0 0 50px ${selectedTopic.glowColor}`,
                      `0 0 20px ${selectedTopic.glowColor}`
                    ]
                  }}
                  transition={{ duration: 3, repeat: Infinity }}
                >
                  <selectedTopic.icon className="w-12 h-12 text-white" />
                </motion.div>

                <h2 className="text-4xl font-bold text-white mb-2">
                  {selectedTopic.name[language]}
                </h2>
                <p className="text-teal-200 max-w-2xl mx-auto">
                  {selectedTopic.description[language]}
                </p>
              </div>

              {/* Games Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {selectedTopic.subGames.map((game, index) => (
                  <motion.div
                    key={game.id}
                    initial={{ opacity: 0, y: 50 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.15 }}
                    className="group cursor-pointer"
                    whileHover={{ scale: 1.05, y: -8 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => handleGameSelect(game.id)}
                  >
                    <Card className="relative overflow-hidden bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-md border-white/20 shadow-xl group-hover:shadow-2xl transition-all duration-500 h-full">
                      <CardContent className="p-6 text-center space-y-4">
                        {/* Game Type Icon */}
                        <motion.div
                          className={`w-16 h-16 mx-auto rounded-full flex items-center justify-center ${
                            game.type === 'game' 
                              ? 'bg-cyan-500/20 text-cyan-400' 
                              : game.type === 'puzzle'
                              ? 'bg-green-500/20 text-green-400'
                              : 'bg-orange-500/20 text-orange-400'
                          }`}
                          whileHover={{ 
                            rotate: 360, 
                            scale: 1.2,
                            boxShadow: '0 0 20px rgba(255,255,255,0.5)'
                          }}
                          transition={{ duration: 0.8 }}
                        >
                          {game.type === 'game' ? (
                            <Gamepad2 className="w-8 h-8" />
                          ) : game.type === 'puzzle' ? (
                            <Puzzle className="w-8 h-8" />
                          ) : (
                            <Trophy className="w-8 h-8" />
                          )}
                        </motion.div>

                        <h3 className="text-xl font-bold text-white group-hover:text-cyan-200 transition-colors">
                          {game.name[language]}
                        </h3>

                        <Badge className={`${
                          game.type === 'game' 
                            ? 'bg-cyan-500/20 text-cyan-300 border-cyan-400/50' 
                            : game.type === 'puzzle'
                            ? 'bg-green-500/20 text-green-300 border-green-400/50'
                            : 'bg-orange-500/20 text-orange-300 border-orange-400/50'
                        }`}>
                          {game.type === 'game' 
                            ? (language === 'en' ? 'Interactive Experiment' : language === 'hi' ? '‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó' : '‡¨á‡¨£‡≠ç‡¨ü‡¨∞‡¨æ‡¨ï‡≠ç‡¨ü‡¨ø‡¨≠‡≠ç ‡¨™‡¨∞‡≠Ä‡¨ï‡≠ç‡¨∑‡¨æ')
                            : game.type === 'puzzle'
                            ? (language === 'en' ? 'Science Puzzle' : language === 'hi' ? '‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§™‡§π‡•á‡§≤‡•Ä' : '‡¨¨‡¨ø‡¨ú‡≠ç‡¨û‡¨æ‡¨® ‡¨™‡¨π‡≠á‡¨≤‡¨ø')
                            : (language === 'en' ? 'Lab Challenge' : language === 'hi' ? '‡§≤‡•à‡§¨ ‡§ö‡•Å‡§®‡•å‡§§‡•Ä' : '‡¨≤‡≠ç‡≠ü‡¨æ‡¨¨ ‡¨ö‡≠ç‡≠ü‡¨æ‡¨≤‡≠á‡¨û‡≠ç‡¨ú')}
                        </Badge>

                        {/* Special badge for completed nutrient navigator */}
                        {selectedTopic.id === 'food-components' && game.id === 'nutrient-navigator' && (
                          <Badge className="bg-yellow-500/20 text-yellow-300 border-yellow-400/50">
                            ‚ú® {language === 'en' ? 'Completed' : language === 'hi' ? '‡§™‡•Ç‡§∞‡•ç‡§£' : '‡¨∏‡¨Æ‡≠ç‡¨™‡≠Ç‡¨∞‡≠ç‡¨£‡≠ç‡¨£'}
                          </Badge>
                        )}

                        <motion.div
                          className="flex items-center justify-center text-white/80"
                          whileHover={{ scale: 1.1 }}
                        >
                          <Play className="w-5 h-5 mr-2" />
                          {language === 'en' ? 'Start Experiment' : language === 'hi' ? '‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç' : '‡¨™‡¨∞‡≠Ä‡¨ï‡≠ç‡¨∑‡¨æ ‡¨Ü‡¨∞‡¨Æ‡≠ç‡¨≠ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å'}
                        </motion.div>

                        {/* Floating science particles */}
                        <div className="absolute inset-0 pointer-events-none">
                          {[...Array(6)].map((_, i) => (
                            <motion.div
                              key={i}
                              className="absolute w-1 h-1 bg-white/40 rounded-full"
                              style={{
                                left: `${Math.random() * 100}%`,
                                top: `${Math.random() * 100}%`
                              }}
                              animate={{
                                y: [-10, 10, -10],
                                x: [-5, 5, -5],
                                opacity: [0.4, 0.8, 0.4],
                                scale: [1, 1.5, 1]
                              }}
                              transition={{
                                duration: 3 + Math.random() * 2,
                                repeat: Infinity,
                                delay: i * 0.5
                              }}
                            />
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          )}
        </div>
      </div>

      {/* Floating Laboratory Equipment */}
      <AnimatePresence>
        {!selectedTopic && (
          <motion.div
            initial={{ opacity: 0, scale: 0 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0 }}
            className="fixed bottom-8 right-8 z-30"
          >
            <motion.div
              className="bg-gradient-to-r from-teal-600 to-cyan-600 text-white p-4 rounded-full shadow-2xl cursor-pointer"
              whileHover={{ 
                scale: 1.15, 
                rotate: 360,
                boxShadow: '0 0 30px rgba(6, 182, 212, 0.8)'
              }}
              whileTap={{ scale: 0.9 }}
              animate={{
                boxShadow: [
                  '0 0 20px rgba(20, 184, 166, 0.5)',
                  '0 0 40px rgba(20, 184, 166, 0.8)',
                  '0 0 20px rgba(20, 184, 166, 0.5)'
                ]
              }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              <Microscope className="w-8 h-8" />
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}