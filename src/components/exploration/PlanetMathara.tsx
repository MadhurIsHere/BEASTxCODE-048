import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'motion/react';
import { 
  ArrowLeft, 
  Calculator,
  Shapes,
  BarChart,
  TrendingUp,
  Zap,
  Star,
  Trophy,
  Play,
  Lock,
  CheckCircle,
  Target,
  Gamepad2,
  Crown,
  Compass,
  Lightbulb,
  Puzzle,
  Globe,
  Atom,
  Brain
} from 'lucide-react';
import { Button } from '../ui/button';
import { Card, CardContent } from '../ui/card';
import { Badge } from '../ui/badge';
import { Progress } from '../ui/progress';
import type { Language } from '../../types/onboarding';

interface PlanetMatharaProps {
  language: Language;
  onBack: () => void;
  onNavigateToMission: (missionId: string) => void;
}

interface MathTopic {
  id: string;
  name: { en: string; hi: string; or: string };
  description: { en: string; hi: string; or: string };
  icon: React.ElementType;
  color: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  xpReward: number;
  estimatedTime: number;
  isUnlocked: boolean;
  progress: number;
  position: { x: number; y: number };
  glowColor: string;
  subGames: {
    id: string;
    name: { en: string; hi: string; or: string };
    type: 'game' | 'puzzle' | 'challenge';
  }[];
}

const MATH_TOPICS: MathTopic[] = [
  // Featured Math Demo Game - Working Interactive Game
  {
    id: 'math-lab',
    name: { 
      en: 'üî¢ Math Laboratory', 
      hi: 'üî¢ ‡§ó‡§£‡§ø‡§§ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≤‡§æ', 
      or: 'üî¢ ‡¨ó‡¨£‡¨ø‡¨§ ‡¨≤‡¨æ‡¨¨‡≠ã‡¨∞‡≠á‡¨ü‡≠ã‡¨∞‡≠Ä' 
    },
    description: { 
      en: 'Interactive math lab! Compare numbers, solve puzzles, and discover the magic of mathematics!', 
      hi: '‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§ó‡§£‡§ø‡§§ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≤‡§æ! ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§™‡§π‡•á‡§≤‡§ø‡§Ø‡§æ‡§Ç ‡§∏‡•Å‡§≤‡§ù‡§æ‡§è‡§Ç, ‡§î‡§∞ ‡§ó‡§£‡§ø‡§§ ‡§ï‡•á ‡§ú‡§æ‡§¶‡•Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨á‡¨£‡≠ç‡¨ü‡¨∞‡¨æ‡¨ï‡≠ç‡¨ü‡¨ø‡¨≠ ‡¨ó‡¨£‡¨ø‡¨§ ‡¨≤‡¨æ‡¨¨‡≠ã‡¨∞‡≠á‡¨ü‡≠ã‡¨∞‡≠Ä! ‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ ‡¨§‡≠Å‡¨≥‡¨®‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å, ‡¨™‡¨ú‡¨≤ ‡¨∏‡¨Æ‡¨æ‡¨ß‡¨æ‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Calculator,
    color: 'from-purple-600 to-blue-600',
    difficulty: 'beginner',
    xpReward: 200,
    estimatedTime: 20,
    isUnlocked: true,
    progress: 0,
    position: { x: 10, y: 8 },
    glowColor: 'rgba(147, 51, 234, 0.8)',
    subGames: [
      { id: 'number-compare', name: { en: 'Number Compare', hi: '‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§§‡•Å‡§≤‡§®‡§æ', or: '‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ ‡¨§‡≠Å‡¨≥‡¨®‡¨æ' }, type: 'game' },
      { id: 'math-puzzle', name: { en: 'Math Puzzle', hi: '‡§ó‡§£‡§ø‡§§ ‡§™‡§π‡•á‡§≤‡•Ä', or: '‡¨ó‡¨£‡¨ø‡¨§ ‡¨™‡¨ú‡¨≤' }, type: 'puzzle' },
      { id: 'quick-math', name: { en: 'Quick Math', hi: '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ó‡§£‡§ø‡§§', or: '‡¨¶‡≠ç‡¨∞‡≠Å‡¨§ ‡¨ó‡¨£‡¨ø‡¨§' }, type: 'challenge' }
    ]
  },
  {
    id: 'knowing-numbers',
    name: { 
      en: 'Number Universe', 
      hi: '‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§°', 
      or: '‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ ‡¨¨‡≠ç‡¨∞‡¨π‡≠ç‡¨Æ‡¨æ‡¨£‡≠ç‡¨°' 
    },
    description: { 
      en: 'Explore the infinite world of numbers, comparison, and Roman mysteries!', 
      hi: '‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§Ö‡§®‡§Ç‡§§ ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ, ‡§§‡•Å‡§≤‡§®‡§æ ‡§î‡§∞ ‡§∞‡•ã‡§Æ‡§® ‡§∞‡§π‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ‡¨∞ ‡¨Ö‡¨∏‡≠Ä‡¨Æ ‡¨ú‡¨ó‡¨§, ‡¨§‡≠Å‡¨≥‡¨®‡¨æ ‡¨è‡¨¨‡¨Ç ‡¨∞‡≠ã‡¨Æ‡¨æ‡¨® ‡¨∞‡¨π‡¨∏‡≠ç‡≠ü ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Crown,
    color: 'from-purple-600 to-pink-600',
    difficulty: 'beginner',
    xpReward: 150,
    estimatedTime: 25,
    isUnlocked: true,
    progress: 0,
    position: { x: 20, y: 15 },
    glowColor: 'rgba(147, 51, 234, 0.6)',
    subGames: [
      { id: 'number-comparison', name: { en: 'Number Warrior', hi: '‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§Ø‡•ã‡§¶‡•ç‡§ß‡§æ', or: '‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ ‡¨Ø‡≠ã‡¨¶‡≠ç‡¨ß‡¨æ' }, type: 'game' },
      { id: 'roman-adventure', name: { en: 'Roman Quest', hi: '‡§∞‡•ã‡§Æ‡§® ‡§ñ‡•ã‡§ú', or: '‡¨∞‡≠ã‡¨Æ‡¨æ‡¨® ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£' }, type: 'puzzle' },
      { id: 'estimation-master', name: { en: 'Estimation Wizard', hi: '‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§ú‡§æ‡§¶‡•Ç‡§ó‡§∞', or: '‡¨Ö‡¨®‡≠Å‡¨Æ‡¨æ‡¨® ‡¨Ø‡¨æ‡¨¶‡≠Å‡¨ó‡¨∞' }, type: 'challenge' }
    ]
  },
  {
    id: 'whole-numbers',
    name: { 
      en: 'Whole Number Kingdom', 
      hi: '‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§∞‡§æ‡§ú‡•ç‡§Ø', 
      or: '‡¨™‡≠Ç‡¨∞‡≠ç‡¨£‡≠ç‡¨£ ‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ ‡¨∞‡¨æ‡¨ú‡≠ç‡≠ü' 
    },
    description: { 
      en: 'Master the properties and patterns of whole numbers in magical battles!', 
      hi: '‡§ú‡§æ‡§¶‡•Å‡§à ‡§≤‡§°‡§º‡§æ‡§á‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§ó‡•Å‡§£‡•ã‡§Ç ‡§î‡§∞ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§æ‡§∞‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨Ø‡¨æ‡¨¶‡≠Å‡¨ó‡¨∞ ‡¨Ø‡≠Å‡¨¶‡≠ç‡¨ß‡¨∞‡≠á ‡¨™‡≠Ç‡¨∞‡≠ç‡¨£‡≠ç‡¨£ ‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ‡¨∞ ‡¨ó‡≠Å‡¨£ ‡¨è‡¨¨‡¨Ç ‡¨™‡≠ç‡≠ü‡¨æ‡¨ü‡¨∞‡≠ç‡¨®‡¨∞‡≠á ‡¨¶‡¨ï‡≠ç‡¨∑‡¨§‡¨æ ‡¨Ö‡¨∞‡≠ç‡¨ú‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Compass,
    color: 'from-blue-600 to-cyan-600',
    difficulty: 'beginner',
    xpReward: 180,
    estimatedTime: 30,
    isUnlocked: true,
    progress: 25,
    position: { x: 45, y: 25 },
    glowColor: 'rgba(37, 99, 235, 0.6)',
    subGames: [
      { id: 'properties-battle', name: { en: 'Property Warrior', hi: '‡§ó‡•Å‡§£ ‡§Ø‡•ã‡§¶‡•ç‡§ß‡§æ', or: '‡¨ó‡≠Å‡¨£ ‡¨Ø‡≠ã‡¨¶‡≠ç‡¨ß‡¨æ' }, type: 'game' },
      { id: 'pattern-hunter', name: { en: 'Pattern Detective', hi: '‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ú‡§æ‡§∏‡•Ç‡§∏', or: '‡¨™‡≠ç‡≠ü‡¨æ‡¨ü‡¨∞‡≠ç‡¨® ‡¨ó‡≠Å‡¨™‡≠ç‡¨§‡¨ö‡¨∞' }, type: 'puzzle' },
      { id: 'closure-challenge', name: { en: 'Closure Master', hi: '‡§¨‡§Ç‡§¶ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞', or: '‡¨¨‡¨®‡≠ç‡¨¶ ‡¨Æ‡¨æ‡¨∑‡≠ç‡¨ü‡¨∞' }, type: 'challenge' }
    ]
  },
  {
    id: 'playing-numbers',
    name: { 
      en: 'Number Playground', 
      hi: '‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§ñ‡•á‡§≤ ‡§ï‡§æ ‡§Æ‡•à‡§¶‡§æ‡§®', 
      or: '‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ ‡¨ñ‡≠á‡¨≥ ‡¨Æ‡¨á‡¨¶‡¨æ‡¨®' 
    },
    description: { 
      en: 'Discover factors, multiples, and prime secrets in the Number Arcade!', 
      hi: '‡§®‡§Ç‡§¨‡§∞ ‡§Ü‡§∞‡•ç‡§ï‡•á‡§° ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§∞‡§ï, ‡§ó‡•Å‡§£‡§ú ‡§î‡§∞ ‡§Ö‡§≠‡§æ‡§ú‡•ç‡§Ø ‡§∞‡§π‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨®‡¨Æ‡≠ç‡¨¨‡¨∞ ‡¨Ü‡¨∞‡≠ç‡¨ï‡≠á‡¨°‡¨∞‡≠á ‡¨ó‡≠Å‡¨£‡¨®‡≠Ä‡≠ü‡¨ï, ‡¨ó‡≠Å‡¨£‡¨ø‡¨§‡¨ï ‡¨è‡¨¨‡¨Ç ‡¨Æ‡≠å‡¨≥‡¨ø‡¨ï ‡¨∞‡¨π‡¨∏‡≠ç‡≠ü ‡¨Ü‡¨¨‡¨ø‡¨∑‡≠ç‡¨ï‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Gamepad2,
    color: 'from-green-600 to-emerald-600',
    difficulty: 'intermediate',
    xpReward: 200,
    estimatedTime: 35,
    isUnlocked: true,
    progress: 0,
    position: { x: 70, y: 15 },
    glowColor: 'rgba(34, 197, 94, 0.6)',
    subGames: [
      { id: 'factor-factory', name: { en: 'Factor Factory', hi: '‡§ï‡§æ‡§∞‡§ï ‡§ï‡§æ‡§∞‡§ñ‡§æ‡§®‡§æ', or: '‡¨ó‡≠Å‡¨£‡¨®‡≠Ä‡≠ü‡¨ï ‡¨ï‡¨æ‡¨∞‡¨ñ‡¨æ‡¨®‡¨æ' }, type: 'game' },
      { id: 'prime-hunter', name: { en: 'Prime Hunter', hi: '‡§Ö‡§≠‡§æ‡§ú‡•ç‡§Ø ‡§∂‡§ø‡§ï‡§æ‡§∞‡•Ä', or: '‡¨Æ‡≠å‡¨≥‡¨ø‡¨ï ‡¨∂‡¨ø‡¨ï‡¨æ‡¨∞‡≠Ä' }, type: 'puzzle' },
      { id: 'divisibility-dash', name: { en: 'Divisibility Dash', hi: '‡§µ‡§ø‡§≠‡§æ‡§ú‡•ç‡§Ø‡§§‡§æ ‡§°‡•à‡§∂', or: '‡¨¨‡¨ø‡¨≠‡¨æ‡¨ú‡≠ç‡≠ü‡¨§‡¨æ ‡¨°‡≠ç‡≠ü‡¨æ‡¨∏‡≠ç' }, type: 'challenge' }
    ]
  },
  {
    id: 'geometry-basics',
    name: { 
      en: 'Geometry Galaxy', 
      hi: '‡§ú‡•ç‡§Ø‡§æ‡§Æ‡§ø‡§§‡§ø ‡§Ü‡§ï‡§æ‡§∂‡§ó‡§Ç‡§ó‡§æ', 
      or: '‡¨ú‡≠ç‡≠ü‡¨æ‡¨Æ‡¨ø‡¨§‡¨ø ‡¨ó‡¨æ‡¨≤‡¨æ‡¨ï‡≠ç‡¨∏‡¨ø' 
    },
    description: { 
      en: 'Journey through points, lines, and shapes in the cosmic geometry realm!', 
      hi: '‡§ï‡•â‡§∏‡•ç‡§Æ‡§ø‡§ï ‡§ú‡•ç‡§Ø‡§æ‡§Æ‡§ø‡§§‡§ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§¨‡§ø‡§Ç‡§¶‡•Å‡§ì‡§Ç, ‡§∞‡•á‡§ñ‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§Ü‡§ï‡•É‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨Æ‡¨π‡¨æ‡¨ï‡¨æ‡¨∂‡≠Ä‡≠ü ‡¨ú‡≠ç‡≠ü‡¨æ‡¨Æ‡¨ø‡¨§‡¨ø ‡¨ï‡≠ç‡¨∑‡≠á‡¨§‡≠ç‡¨∞‡¨∞‡≠á ‡¨¨‡¨ø‡¨®‡≠ç‡¨¶‡≠Å, ‡¨∞‡≠á‡¨ñ‡¨æ ‡¨è‡¨¨‡¨Ç ‡¨Ü‡¨ï‡≠É‡¨§‡¨ø‡¨∞ ‡¨Æ‡¨æ‡¨ß‡≠ç‡≠ü‡¨Æ‡¨∞‡≠á ‡¨Ø‡¨æ‡¨§‡≠ç‡¨∞‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Shapes,
    color: 'from-orange-600 to-red-600',
    difficulty: 'intermediate',
    xpReward: 220,
    estimatedTime: 40,
    isUnlocked: true,
    progress: 60,
    position: { x: 25, y: 45 },
    glowColor: 'rgba(234, 88, 12, 0.6)',
    subGames: [
      { id: 'shape-explorer', name: { en: 'Shape Explorer', hi: '‡§Ü‡§ï‡§æ‡§∞ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§ï', or: '‡¨Ü‡¨ï‡¨æ‡¨∞ ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨ï' }, type: 'game' },
      { id: 'angle-adventure', name: { en: 'Angle Adventure', hi: '‡§ï‡•ã‡§£ ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï', or: '‡¨ï‡≠ã‡¨£ ‡¨¶‡≠Å‡¨É‡¨∏‡¨æ‡¨π‡¨∏‡¨ø‡¨ï' }, type: 'puzzle' },
      { id: 'polygon-palace', name: { en: 'Polygon Palace', hi: '‡§¨‡§π‡•Å‡§≠‡•Å‡§ú ‡§Æ‡§π‡§≤', or: '‡¨¨‡¨π‡≠Å‡¨≠‡≠Å‡¨ú ‡¨Æ‡¨π‡¨≤' }, type: 'challenge' }
    ]
  },
  {
    id: 'elementary-shapes',
    name: { 
      en: 'Shape Dimension', 
      hi: '‡§Ü‡§ï‡§æ‡§∞ ‡§Ü‡§Ø‡§æ‡§Æ', 
      or: '‡¨Ü‡¨ï‡¨æ‡¨∞ ‡¨Ü‡≠ü‡¨æ‡¨Æ' 
    },
    description: { 
      en: 'Explore angles, triangles, and 3D worlds in the Shape Laboratory!', 
      hi: '‡§∂‡•á‡§™ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§∂‡§æ‡§≤‡§æ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§£, ‡§§‡•ç‡§∞‡§ø‡§ï‡•ã‡§£ ‡§î‡§∞ 3‡§°‡•Ä ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨∂‡≠á‡¨™‡≠ç ‡¨≤‡¨æ‡¨¨‡≠ã‡¨∞‡≠á‡¨ü‡≠ã‡¨∞‡≠Ä‡¨∞‡≠á ‡¨ï‡≠ã‡¨£, ‡¨§‡≠ç‡¨∞‡¨ø‡¨≠‡≠Å‡¨ú ‡¨è‡¨¨‡¨Ç 3D ‡¨¶‡≠Å‡¨®‡¨ø‡¨Ü ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Globe,
    color: 'from-indigo-600 to-purple-600',
    difficulty: 'intermediate',
    xpReward: 240,
    estimatedTime: 45,
    isUnlocked: true,
    progress: 30,
    position: { x: 55, y: 55 },
    glowColor: 'rgba(99, 102, 241, 0.6)',
    subGames: [
      { id: 'angle-master', name: { en: 'Angle Master', hi: '‡§ï‡•ã‡§£ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞', or: '‡¨ï‡≠ã‡¨£ ‡¨Æ‡¨æ‡¨∑‡≠ç‡¨ü‡¨∞' }, type: 'game' },
      { id: 'triangle-quest', name: { en: 'Triangle Quest', hi: '‡§§‡•ç‡§∞‡§ø‡§ï‡•ã‡§£ ‡§ñ‡•ã‡§ú', or: '‡¨§‡≠ç‡¨∞‡¨ø‡¨≠‡≠Å‡¨ú ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£' }, type: 'puzzle' },
      { id: '3d-explorer', name: { en: '3D Explorer', hi: '3‡§°‡•Ä ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§ï', or: '3D ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨ï' }, type: 'challenge' }
    ]
  },
  {
    id: 'integers',
    name: { 
      en: 'Integer Island', 
      hi: '‡§™‡•Ç‡§∞‡•ç‡§£‡§æ‡§Ç‡§ï ‡§¶‡•ç‡§µ‡•Ä‡§™', 
      or: '‡¨™‡≠Ç‡¨∞‡≠ç‡¨£‡≠ç‡¨£‡¨æ‡¨ô‡≠ç‡¨ï ‡¨¶‡≠ç‡≠±‡≠Ä‡¨™' 
    },
    description: { 
      en: 'Navigate the positive and negative worlds on the Number Line Express!', 
      hi: '‡§®‡§Ç‡§¨‡§∞ ‡§≤‡§æ‡§á‡§® ‡§è‡§ï‡•ç‡§∏‡§™‡•ç‡§∞‡•á‡§∏ ‡§™‡§∞ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨®‡¨Æ‡≠ç‡¨¨‡¨∞ ‡¨≤‡¨æ‡¨á‡¨®‡≠ç ‡¨è‡¨ï‡≠ç‡¨∏‡¨™‡≠ç‡¨∞‡≠á‡¨∏‡¨∞‡≠á ‡¨∏‡¨ï‡¨∞‡¨æ‡¨§‡≠ç‡¨Æ‡¨ï ‡¨è‡¨¨‡¨Ç ‡¨®‡¨ï‡¨∞‡¨æ‡¨§‡≠ç‡¨Æ‡¨ï ‡¨¶‡≠Å‡¨®‡¨ø‡¨Ü‡¨∞‡≠á ‡¨®‡≠á‡¨≠‡¨ø‡¨ó‡≠á‡¨ü‡≠ç ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: TrendingUp,
    color: 'from-teal-600 to-blue-600',
    difficulty: 'intermediate',
    xpReward: 190,
    estimatedTime: 30,
    isUnlocked: false,
    progress: 0,
    position: { x: 80, y: 40 },
    glowColor: 'rgba(20, 184, 166, 0.6)',
    subGames: [
      { id: 'number-line-race', name: { en: 'Number Line Race', hi: '‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§∞‡•á‡§ñ‡§æ ‡§¶‡•å‡§°‡§º', or: '‡¨∏‡¨Ç‡¨ñ‡≠ç‡≠ü‡¨æ ‡¨∞‡≠á‡¨ñ‡¨æ ‡¨¶‡≠å‡¨°‡¨º' }, type: 'game' },
      { id: 'positive-negative', name: { en: 'Positive vs Negative', hi: '‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§¨‡§®‡§æ‡§Æ ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï', or: '‡¨∏‡¨ï‡¨∞‡¨æ‡¨§‡≠ç‡¨Æ‡¨ï ‡¨¨‡¨®‡¨æ‡¨Æ ‡¨®‡¨ï‡¨∞‡¨æ‡¨§‡≠ç‡¨Æ‡¨ï' }, type: 'puzzle' },
      { id: 'integer-operations', name: { en: 'Integer Operations', hi: '‡§™‡•Ç‡§∞‡•ç‡§£‡§æ‡§Ç‡§ï ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§®', or: '‡¨™‡≠Ç‡¨∞‡≠ç‡¨£‡≠ç‡¨£‡¨æ‡¨ô‡≠ç‡¨ï ‡¨∏‡¨û‡≠ç‡¨ö‡¨æ‡¨≥‡¨®' }, type: 'challenge' }
    ]
  },
  {
    id: 'fractions',
    name: { 
      en: 'Fraction Fantasy', 
      hi: '‡§≠‡§ø‡§®‡•ç‡§® ‡§ï‡§≤‡•ç‡§™‡§®‡§æ', 
      or: '‡¨≠‡¨ø‡¨®‡≠ç‡¨® ‡¨ï‡¨≥‡≠ç‡¨™‡¨®‡¨æ' 
    },
    description: { 
      en: 'Slice and dice your way through the magical world of fractions!', 
      hi: '‡§≠‡§ø‡§®‡•ç‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§¶‡•Å‡§à ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§Ö‡§™‡§®‡§æ ‡§∞‡§æ‡§∏‡•ç‡§§‡§æ ‡§ï‡§æ‡§ü‡•á‡§Ç ‡§î‡§∞ ‡§ï‡§æ‡§ü‡•á‡§Ç!', 
      or: '‡¨≠‡¨ø‡¨®‡≠ç‡¨®‡¨∞ ‡¨Ø‡¨æ‡¨¶‡≠Å‡¨ó‡¨∞ ‡¨¶‡≠Å‡¨®‡¨ø‡¨Ü ‡¨Æ‡¨æ‡¨ß‡≠ç‡≠ü‡¨Æ‡¨∞‡≠á ‡¨®‡¨ø‡¨ú‡¨∞ ‡¨∞‡¨æ‡¨∏‡≠ç‡¨§‡¨æ ‡¨ï‡¨æ‡¨ü‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Puzzle,
    color: 'from-rose-600 to-pink-600',
    difficulty: 'intermediate',
    xpReward: 210,
    estimatedTime: 35,
    isUnlocked: false,
    progress: 0,
    position: { x: 15, y: 70 },
    glowColor: 'rgba(244, 63, 94, 0.6)',
    subGames: [
      { id: 'pizza-fractions', name: { en: 'Pizza Party', hi: '‡§™‡§ø‡§ú‡•ç‡§ú‡§æ ‡§™‡§æ‡§∞‡•ç‡§ü‡•Ä', or: '‡¨™‡¨ø‡¨ú‡¨æ ‡¨™‡¨æ‡¨∞‡≠ç‡¨ü‡¨ø' }, type: 'game' },
      { id: 'equivalent-explorer', name: { en: 'Equivalent Explorer', hi: '‡§∏‡§Æ‡§ï‡§ï‡•ç‡§∑ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§ï', or: '‡¨∏‡¨Æ‡¨§‡≠Å‡¨≤‡≠ç‡≠ü ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨ï' }, type: 'puzzle' },
      { id: 'fraction-arithmetic', name: { en: 'Fraction Arithmetic', hi: '‡§≠‡§ø‡§®‡•ç‡§® ‡§ó‡§£‡§ø‡§§', or: '‡¨≠‡¨ø‡¨®‡≠ç‡¨® ‡¨ó‡¨£‡¨ø‡¨§' }, type: 'challenge' }
    ]
  },
  {
    id: 'decimals',
    name: { 
      en: 'Decimal Domain', 
      hi: '‡§¶‡§∂‡§Æ‡§≤‡§µ ‡§°‡•ã‡§Æ‡•á‡§®', 
      or: '‡¨¶‡¨∂‡¨Æ‡¨ø‡¨ï ‡¨°‡≠ã‡¨Æ‡≠á‡¨®‡≠ç' 
    },
    description: { 
      en: 'Precision adventures in the land of tenths, hundredths, and money!', 
      hi: '‡§¶‡§∏‡§µ‡•á‡§Ç, ‡§∏‡•å‡§µ‡•á‡§Ç ‡§î‡§∞ ‡§™‡•à‡§∏‡•á ‡§ï‡•Ä ‡§≠‡•Ç‡§Æ‡§ø ‡§Æ‡•á‡§Ç ‡§∏‡§ü‡•Ä‡§ï ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø!', 
      or: '‡¨¶‡¨∂‡¨Æ, ‡¨∂‡¨§‡¨Æ ‡¨è‡¨¨‡¨Ç ‡¨ü‡¨ô‡≠ç‡¨ï‡¨æ ‡¨¶‡≠á‡¨∂‡¨∞‡≠á ‡¨∏‡¨†‡¨ø‡¨ï ‡¨¶‡≠Å‡¨É‡¨∏‡¨æ‡¨π‡¨∏‡¨ø‡¨ï ‡¨ï‡¨æ‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü!' 
    },
    icon: Target,
    color: 'from-amber-600 to-orange-600',
    difficulty: 'intermediate',
    xpReward: 200,
    estimatedTime: 30,
    isUnlocked: false,
    progress: 0,
    position: { x: 40, y: 75 },
    glowColor: 'rgba(245, 158, 11, 0.6)',
    subGames: [
      { id: 'decimal-market', name: { en: 'Decimal Market', hi: '‡§¶‡§∂‡§Æ‡§≤‡§µ ‡§¨‡§æ‡§ú‡§æ‡§∞', or: '‡¨¶‡¨∂‡¨Æ‡¨ø‡¨ï ‡¨¨‡¨ú‡¨æ‡¨∞' }, type: 'game' },
      { id: 'money-master', name: { en: 'Money Master', hi: '‡§™‡•à‡§∏‡§æ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞', or: '‡¨ü‡¨ô‡≠ç‡¨ï‡¨æ ‡¨Æ‡¨æ‡¨∑‡≠ç‡¨ü‡¨∞' }, type: 'puzzle' },
      { id: 'precision-challenge', name: { en: 'Precision Challenge', hi: '‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ ‡§ö‡•Å‡§®‡•å‡§§‡•Ä', or: '‡¨∏‡¨†‡¨ø‡¨ï‡¨§‡¨æ ‡¨ö‡≠Å‡¨®‡≠å‡¨§‡¨ø' }, type: 'challenge' }
    ]
  },
  {
    id: 'data-handling',
    name: { 
      en: 'Data Detective', 
      hi: '‡§°‡•á‡§ü‡§æ ‡§ú‡§æ‡§∏‡•Ç‡§∏', 
      or: '‡¨°‡¨æ‡¨ü‡¨æ ‡¨ó‡≠Å‡¨™‡≠ç‡¨§‡¨ö‡¨∞' 
    },
    description: { 
      en: 'Solve mysteries using pictographs, bar graphs, and data analysis!', 
      hi: '‡§ö‡§ø‡§§‡•ç‡§∞‡§≤‡•á‡§ñ, ‡§¨‡§æ‡§∞ ‡§ó‡•ç‡§∞‡§æ‡§´ ‡§î‡§∞ ‡§°‡•á‡§ü‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§∞‡§π‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Å‡§≤‡§ù‡§æ‡§è‡§Ç!', 
      or: '‡¨ö‡¨ø‡¨§‡≠ç‡¨∞‡¨≤‡≠á‡¨ñ, ‡¨¨‡¨æ‡¨∞‡≠ç ‡¨ó‡≠ç‡¨∞‡¨æ‡¨´‡≠ç ‡¨è‡¨¨‡¨Ç ‡¨°‡¨æ‡¨ü‡¨æ ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£ ‡¨¨‡≠ç‡≠ü‡¨¨‡¨π‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨ø ‡¨∞‡¨π‡¨∏‡≠ç‡≠ü ‡¨∏‡¨Æ‡¨æ‡¨ß‡¨æ‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: BarChart,
    color: 'from-violet-600 to-purple-600',
    difficulty: 'intermediate',
    xpReward: 180,
    estimatedTime: 25,
    isUnlocked: false,
    progress: 0,
    position: { x: 65, y: 75 },
    glowColor: 'rgba(139, 92, 246, 0.6)',
    subGames: [
      { id: 'graph-builder', name: { en: 'Graph Builder', hi: '‡§ó‡•ç‡§∞‡§æ‡§´ ‡§¨‡§ø‡§≤‡•ç‡§°‡§∞', or: '‡¨ó‡≠ç‡¨∞‡¨æ‡¨´‡≠ç ‡¨¨‡¨ø‡¨≤‡≠ç‡¨°‡¨∞‡≠ç' }, type: 'game' },
      { id: 'data-mystery', name: { en: 'Data Mystery', hi: '‡§°‡•á‡§ü‡§æ ‡§∞‡§π‡§∏‡•ç‡§Ø', or: '‡¨°‡¨æ‡¨ü‡¨æ ‡¨∞‡¨π‡¨∏‡≠ç‡≠ü' }, type: 'puzzle' },
      { id: 'chart-champion', name: { en: 'Chart Champion', hi: '‡§ö‡§æ‡§∞‡•ç‡§ü ‡§ö‡•à‡§Ç‡§™‡§ø‡§Ø‡§®', or: '‡¨ö‡¨æ‡¨∞‡≠ç‡¨ü ‡¨ö‡¨æ‡¨Æ‡≠ç‡¨™‡¨ø‡¨Ö‡¨®‡≠ç' }, type: 'challenge' }
    ]
  },
  {
    id: 'mensuration',
    name: { 
      en: 'Measurement Metropolis', 
      hi: '‡§Æ‡§æ‡§™ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞', 
      or: '‡¨Æ‡¨æ‡¨™ ‡¨Æ‡¨π‡¨æ‡¨®‡¨ó‡¨∞' 
    },
    description: { 
      en: 'Build cities while mastering perimeter and area calculations!', 
      hi: '‡§™‡§∞‡§ø‡§ß‡§ø ‡§î‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤ ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§æ‡§∞‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡§§‡•á ‡§π‡•Å‡§è ‡§∂‡§π‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç!', 
      or: '‡¨™‡¨∞‡¨ø‡¨∏‡≠Ä‡¨Æ‡¨æ ‡¨è‡¨¨‡¨Ç ‡¨ï‡≠ç‡¨∑‡≠á‡¨§‡≠ç‡¨∞‡¨´‡¨≥ ‡¨ó‡¨£‡¨®‡¨æ‡¨∞‡≠á ‡¨¶‡¨ï‡≠ç‡¨∑‡¨§‡¨æ ‡¨Ö‡¨∞‡≠ç‡¨ú‡¨® ‡¨ï‡¨∞‡¨ø ‡¨∏‡¨π‡¨∞ ‡¨®‡¨ø‡¨∞‡≠ç‡¨Æ‡¨æ‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Calculator,
    color: 'from-emerald-600 to-green-600',
    difficulty: 'advanced',
    xpReward: 250,
    estimatedTime: 40,
    isUnlocked: false,
    progress: 0,
    position: { x: 85, y: 65 },
    glowColor: 'rgba(16, 185, 129, 0.6)',
    subGames: [
      { id: 'perimeter-patrol', name: { en: 'Perimeter Patrol', hi: '‡§™‡§∞‡§ø‡§ß‡§ø ‡§ó‡§∂‡•ç‡§§', or: '‡¨™‡¨∞‡¨ø‡¨∏‡≠Ä‡¨Æ‡¨æ ‡¨™‡¨æ‡¨ü‡≠ç‡¨∞‡≠ã‡¨≤‡≠ç' }, type: 'game' },
      { id: 'area-architect', name: { en: 'Area Architect', hi: '‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Ü‡§∞‡•ç‡§ï‡§ø‡§ü‡•á‡§ï‡•ç‡§ü', or: '‡¨ï‡≠ç‡¨∑‡≠á‡¨§‡≠ç‡¨∞ ‡¨∏‡≠ç‡¨•‡¨™‡¨§‡¨ø' }, type: 'puzzle' },
      { id: 'city-planner', name: { en: 'City Planner', hi: '‡§∂‡§π‡§∞ ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ï‡§æ‡§∞', or: '‡¨∏‡¨π‡¨∞ ‡¨Ø‡≠ã‡¨ú‡¨®‡¨æ‡¨ï‡¨æ‡¨∞‡≠Ä' }, type: 'challenge' }
    ]
  },
  {
    id: 'algebra-intro',
    name: { 
      en: 'Algebra Academy', 
      hi: '‡§¨‡•Ä‡§ú‡§ó‡§£‡§ø‡§§ ‡§Ö‡§ï‡§æ‡§¶‡§Æ‡•Ä', 
      or: '‡¨¨‡≠Ä‡¨ú‡¨ó‡¨£‡¨ø‡¨§ ‡¨è‡¨ï‡¨æ‡¨°‡≠á‡¨Æ‡≠Ä' 
    },
    description: { 
      en: 'Unlock the secrets of variables and equations in magical formulas!', 
      hi: '‡§ú‡§æ‡§¶‡•Å‡§à ‡§∏‡•Ç‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ö‡§∞ ‡§î‡§∞ ‡§∏‡§Æ‡•Ä‡§ï‡§∞‡§£‡•ã‡§Ç ‡§ï‡•á ‡§∞‡§π‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§Ö‡§®‡§≤‡•â‡§ï ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨Ø‡¨æ‡¨¶‡≠Å‡¨ó‡¨∞ ‡¨∏‡≠Ç‡¨§‡≠ç‡¨∞‡¨∞‡≠á ‡¨ö‡¨≥ ‡¨è‡¨¨‡¨Ç ‡¨∏‡¨Æ‡≠Ä‡¨ï‡¨∞‡¨£‡¨∞ ‡¨∞‡¨π‡¨∏‡≠ç‡≠ü ‡¨Ö‡¨®‡¨≤‡¨ï‡≠ç ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Brain,
    color: 'from-sky-600 to-blue-600',
    difficulty: 'advanced',
    xpReward: 280,
    estimatedTime: 45,
    isUnlocked: false,
    progress: 0,
    position: { x: 20, y: 95 },
    glowColor: 'rgba(2, 132, 199, 0.6)',
    subGames: [
      { id: 'variable-village', name: { en: 'Variable Village', hi: '‡§ö‡§∞ ‡§ó‡§æ‡§Ç‡§µ', or: '‡¨ö‡¨≥ ‡¨ó‡¨æ‡¨Å' }, type: 'game' },
      { id: 'equation-explorer', name: { en: 'Equation Explorer', hi: '‡§∏‡§Æ‡•Ä‡§ï‡§∞‡§£ ‡§Ö‡§®‡•ç‡§µ‡•á‡§∑‡§ï', or: '‡¨∏‡¨Æ‡≠Ä‡¨ï‡¨∞‡¨£ ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨ï' }, type: 'puzzle' },
      { id: 'formula-forge', name: { en: 'Formula Forge', hi: '‡§∏‡•Ç‡§§‡•ç‡§∞ ‡§´‡•ã‡§∞‡•ç‡§ú', or: '‡¨∏‡≠Ç‡¨§‡≠ç‡¨∞ ‡¨´‡≠ã‡¨∞‡≠ç‡¨ú' }, type: 'challenge' }
    ]
  },
  {
    id: 'ratio-proportion',
    name: { 
      en: 'Ratio Realm', 
      hi: '‡§Ö‡§®‡•Å‡§™‡§æ‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞', 
      or: '‡¨Ö‡¨®‡≠Å‡¨™‡¨æ‡¨§ ‡¨ï‡≠ç‡¨∑‡≠á‡¨§‡≠ç‡¨∞' 
    },
    description: { 
      en: 'Balance the universe with ratios, proportions, and unitary methods!', 
      hi: '‡§Ö‡§®‡•Å‡§™‡§æ‡§§, ‡§Ö‡§®‡•Å‡§™‡§æ‡§§ ‡§î‡§∞ ‡§è‡§ï‡§æ‡§§‡•ç‡§Æ‡§ï ‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨Ö‡¨®‡≠Å‡¨™‡¨æ‡¨§, ‡¨Ö‡¨®‡≠Å‡¨™‡¨æ‡¨§ ‡¨è‡¨¨‡¨Ç ‡¨è‡¨ï‡¨ï ‡¨™‡¨¶‡≠ç‡¨ß‡¨§‡¨ø ‡¨∏‡¨π‡¨ø‡¨§ ‡¨¨‡≠ç‡¨∞‡¨π‡≠ç‡¨Æ‡¨æ‡¨£‡≠ç‡¨°‡¨ï‡≠Å ‡¨∏‡¨®‡≠ç‡¨§‡≠Å‡¨≥‡¨ø‡¨§ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Lightbulb,
    color: 'from-lime-600 to-green-600',
    difficulty: 'advanced',
    xpReward: 220,
    estimatedTime: 35,
    isUnlocked: false,
    progress: 0,
    position: { x: 50, y: 90 },
    glowColor: 'rgba(101, 163, 13, 0.6)',
    subGames: [
      { id: 'ratio-race', name: { en: 'Ratio Race', hi: '‡§Ö‡§®‡•Å‡§™‡§æ‡§§ ‡§¶‡•å‡§°‡§º', or: '‡¨Ö‡¨®‡≠Å‡¨™‡¨æ‡¨§ ‡¨¶‡≠å‡¨°‡¨º' }, type: 'game' },
      { id: 'proportion-palace', name: { en: 'Proportion Palace', hi: '‡§Ö‡§®‡•Å‡§™‡§æ‡§§ ‡§Æ‡§π‡§≤', or: '‡¨Ö‡¨®‡≠Å‡¨™‡¨æ‡¨§ ‡¨Æ‡¨π‡¨≤' }, type: 'puzzle' },
      { id: 'unitary-universe', name: { en: 'Unitary Universe', hi: '‡§è‡§ï‡§æ‡§§‡•ç‡§Æ‡§ï ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§°', or: '‡¨è‡¨ï‡¨ï ‡¨¨‡≠ç‡¨∞‡¨π‡≠ç‡¨Æ‡¨æ‡¨£‡≠ç‡¨°' }, type: 'challenge' }
    ]
  },
  {
    id: 'symmetry',
    name: { 
      en: 'Symmetry Sanctuary', 
      hi: '‡§∏‡§Æ‡§Æ‡§ø‡§§‡§ø ‡§Ö‡§≠‡§Ø‡§æ‡§∞‡§£‡•ç‡§Ø', 
      or: '‡¨∏‡¨Æ‡¨Æ‡¨ø‡¨§‡¨ø ‡¨Ö‡¨≠‡≠ü‡¨æ‡¨∞‡¨£‡≠ç‡≠ü' 
    },
    description: { 
      en: 'Create beautiful patterns and discover reflective symmetries!', 
      hi: '‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§¨‡§®‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§ø‡§Ç‡§¨‡§ø‡§§ ‡§∏‡§Æ‡§∞‡•Ç‡§™‡§§‡§æ ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç!', 
      or: '‡¨∏‡≠Å‡¨®‡≠ç‡¨¶‡¨∞ ‡¨™‡≠ç‡≠ü‡¨æ‡¨ü‡¨∞‡≠ç‡¨® ‡¨∏‡≠É‡¨∑‡≠ç‡¨ü‡¨ø ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å ‡¨è‡¨¨‡¨Ç ‡¨™‡≠ç‡¨∞‡¨§‡¨ø‡¨´‡¨≥‡¨ø‡¨§ ‡¨∏‡¨Æ‡¨Æ‡¨ø‡¨§‡¨ø ‡¨Ü‡¨¨‡¨ø‡¨∑‡≠ç‡¨ï‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!' 
    },
    icon: Atom,
    color: 'from-fuchsia-600 to-pink-600',
    difficulty: 'advanced',
    xpReward: 200,
    estimatedTime: 30,
    isUnlocked: false,
    progress: 0,
    position: { x: 75, y: 85 },
    glowColor: 'rgba(192, 38, 211, 0.6)',
    subGames: [
      { id: 'mirror-magic', name: { en: 'Mirror Magic', hi: '‡§¶‡§∞‡•ç‡§™‡§£ ‡§ú‡§æ‡§¶‡•Ç', or: '‡¨¶‡¨∞‡≠ç‡¨™‡¨£ ‡¨Ø‡¨æ‡¨¶‡≠Å' }, type: 'game' },
      { id: 'pattern-creator', name: { en: 'Pattern Creator', hi: '‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§§‡§æ', or: '‡¨™‡≠ç‡≠ü‡¨æ‡¨ü‡¨∞‡≠ç‡¨® ‡¨∏‡≠É‡¨∑‡≠ç‡¨ü‡¨ø‡¨ï‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨æ' }, type: 'puzzle' },
      { id: 'symmetry-studio', name: { en: 'Symmetry Studio', hi: '‡§∏‡§Æ‡§Æ‡§ø‡§§‡§ø ‡§∏‡•ç‡§ü‡•Ç‡§°‡§ø‡§Ø‡•ã', or: '‡¨∏‡¨Æ‡¨Æ‡¨ø‡¨§‡¨ø ‡¨∑‡≠ç‡¨ü‡≠Å‡¨°‡¨ø‡¨ì' }, type: 'challenge' }
    ]
  }
];

export function PlanetMathara({ language, onBack, onNavigateToMission }: PlanetMatharaProps) {
  const [selectedTopic, setSelectedTopic] = useState<MathTopic | null>(null);
  const [isExploring, setIsExploring] = useState(false);
  const [stars, setStars] = useState<Array<{ id: number; x: number; y: number; size: number; opacity: number; delay: number }>>([]);

  // Generate cosmic background stars
  useEffect(() => {
    const starField = Array.from({ length: 150 }, (_, i) => ({
      id: i,
      x: Math.random() * 100,
      y: Math.random() * 100,
      size: Math.random() * 3 + 1,
      opacity: Math.random() * 0.8 + 0.2,
      delay: Math.random() * 5
    }));
    setStars(starField);
  }, []);

  const handleTopicSelect = (topic: MathTopic) => {
    if (!topic.isUnlocked) return;
    setSelectedTopic(topic);
    setIsExploring(true);
  };

  const handleGameSelect = (gameId: string) => {
    if (selectedTopic) {
      onNavigateToMission(`${selectedTopic.id}-${gameId}`);
    }
  };

  const getTotalProgress = () => {
    const totalTopics = MATH_TOPICS.length;
    const completedProgress = MATH_TOPICS.reduce((sum, topic) => sum + topic.progress, 0);
    return (completedProgress / (totalTopics * 100)) * 100;
  };

  const getUnlockedCount = () => {
    return MATH_TOPICS.filter(topic => topic.isUnlocked).length;
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-indigo-900 via-purple-900 to-pink-900 relative overflow-hidden">
      {/* Cosmic Background */}
      <div className="absolute inset-0">
        {/* Animated Stars */}
        {stars.map(star => (
          <motion.div
            key={star.id}
            className="absolute bg-white rounded-full"
            style={{
              left: `${star.x}%`,
              top: `${star.y}%`,
              width: star.size,
              height: star.size,
              opacity: star.opacity
            }}
            animate={{
              opacity: [star.opacity, star.opacity * 0.3, star.opacity],
              scale: [1, 1.2, 1]
            }}
            transition={{
              duration: 3 + star.delay,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          />
        ))}

        {/* Cosmic Nebulas */}
        {[...Array(5)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute rounded-full opacity-20"
            style={{
              left: `${Math.random() * 80}%`,
              top: `${Math.random() * 80}%`,
              width: `${200 + Math.random() * 300}px`,
              height: `${200 + Math.random() * 300}px`,
              background: `radial-gradient(circle, ${
                ['rgba(147, 51, 234, 0.3)', 'rgba(59, 130, 246, 0.3)', 'rgba(236, 72, 153, 0.3)', 'rgba(34, 197, 94, 0.3)', 'rgba(245, 158, 11, 0.3)'][i]
              }, transparent)`
            }}
            animate={{
              scale: [1, 1.2, 1],
              rotate: [0, 360],
              opacity: [0.1, 0.3, 0.1]
            }}
            transition={{
              duration: 20 + Math.random() * 10,
              repeat: Infinity,
              ease: "linear"
            }}
          />
        ))}

        {/* Floating Mathematical Symbols */}
        {['+', '√∑', '√ó', '=', '‚àû', 'œÄ', '‚àö', '‚à†', '‚ñ≥', '‚ñ°'].map((symbol, i) => (
          <motion.div
            key={symbol}
            className="absolute text-white/20 text-6xl font-bold select-none pointer-events-none"
            style={{
              left: `${Math.random() * 90}%`,
              top: `${Math.random() * 90}%`
            }}
            animate={{
              y: [-20, 20, -20],
              rotate: [0, 360],
              opacity: [0.1, 0.3, 0.1]
            }}
            transition={{
              duration: 15 + Math.random() * 10,
              repeat: Infinity,
              ease: "easeInOut",
              delay: i * 2
            }}
          >
            {symbol}
          </motion.div>
        ))}
      </div>

      {/* Header */}
      <div className="relative z-20 bg-black/30 backdrop-blur-md border-b border-purple-400/30">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button
                onClick={onBack}
                variant="outline"
                size="sm"
                className="bg-purple-800/80 border-purple-400 text-purple-200 hover:bg-purple-700"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                {language === 'en' ? 'Back to Universe' : language === 'hi' ? '‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§° ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏' : '‡¨¨‡≠ç‡¨∞‡¨π‡≠ç‡¨Æ‡¨æ‡¨£‡≠ç‡¨°‡¨ï‡≠Å ‡¨´‡≠á‡¨∞‡¨®‡≠ç‡¨§‡≠Å'}
              </Button>
              
              <div>
                <h1 className="text-2xl font-bold text-white flex items-center">
                  <Calculator className="w-6 h-6 mr-2 text-yellow-400" />
                  {language === 'en' ? 'Planet Mathara - Mathematical Adventures' :
                   language === 'hi' ? '‡§ó‡•ç‡§∞‡§π ‡§Æ‡•à‡§•‡§æ‡§∞‡§æ - ‡§ó‡§£‡§ø‡§§‡•Ä‡§Ø ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø' :
                   '‡¨ó‡≠ç‡¨∞‡¨π ‡¨Æ‡¨æ‡¨•‡¨æ‡¨∞‡¨æ - ‡¨ó‡¨æ‡¨£‡¨ø‡¨§‡¨ø‡¨ï ‡¨¶‡≠Å‡¨É‡¨∏‡¨æ‡¨π‡¨∏‡¨ø‡¨ï ‡¨ï‡¨æ‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü'}
                </h1>
                <p className="text-purple-200">
                  {language === 'en' ? 'Master Class 6 Mathematics through epic quests and challenges!' :
                   language === 'hi' ? '‡§Æ‡§π‡§æ‡§ï‡§æ‡§µ‡•ç‡§Ø ‡§ñ‡•ã‡§ú ‡§î‡§∞ ‡§ö‡•Å‡§®‡•å‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§ï‡§ï‡•ç‡§∑‡§æ 6 ‡§ó‡§£‡§ø‡§§ ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§æ‡§∞‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç!' :
                   '‡¨Æ‡¨π‡¨æ‡¨ï‡¨æ‡¨¨‡≠ç‡≠ü ‡¨Ö‡¨®‡≠ç‡≠±‡≠á‡¨∑‡¨£ ‡¨è‡¨¨‡¨Ç ‡¨ö‡≠Å‡¨®‡≠å‡¨§‡¨ø ‡¨Æ‡¨æ‡¨ß‡≠ç‡≠ü‡¨Æ‡¨∞‡≠á ‡¨ï‡¨ï‡≠ç‡¨∑‡¨æ 6 ‡¨ó‡¨£‡¨ø‡¨§‡¨∞‡≠á ‡¨¶‡¨ï‡≠ç‡¨∑‡¨§‡¨æ ‡¨Ö‡¨∞‡≠ç‡¨ú‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å!'}
                </p>
              </div>
            </div>
            
            <div className="flex items-center space-x-6">
              <div className="text-center">
                <div className="text-yellow-400 font-bold text-lg">{getUnlockedCount()}/{MATH_TOPICS.length}</div>
                <div className="text-purple-200 text-sm">{language === 'en' ? 'Unlocked' : language === 'hi' ? '‡§Ö‡§®‡§≤‡•â‡§ï‡•ç‡§°' : '‡¨Ö‡¨®‡¨≤‡¨ï‡≠ç‡¨°'}</div>
              </div>
              
              <div className="text-center">
                <div className="text-green-400 font-bold text-lg">{getTotalProgress().toFixed(0)}%</div>
                <div className="text-purple-200 text-sm">{language === 'en' ? 'Progress' : language === 'hi' ? '‡§™‡•ç‡§∞‡§ó‡§§‡§ø' : '‡¨™‡≠ç‡¨∞‡¨ó‡¨§‡¨ø'}</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="relative z-10 px-6 py-8">
        <div className="max-w-7xl mx-auto">
          
          {!selectedTopic ? (
            // Topic Selection Grid
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
            >
              {MATH_TOPICS.map((topic, index) => {
                const Icon = topic.icon;
                const isLocked = !topic.isUnlocked;
                
                return (
                  <motion.div
                    key={topic.id}
                    className={`relative group cursor-pointer ${isLocked ? 'opacity-60' : ''}`}
                    style={{
                      gridColumn: index % 4 === 0 ? 'span 2' : 'span 1'
                    }}
                    whileHover={!isLocked ? { scale: 1.05, y: -5 } : {}}
                    whileTap={!isLocked ? { scale: 0.95 } : {}}
                    onClick={() => handleTopicSelect(topic)}
                    layout
                  >
                    <Card className={`relative overflow-hidden h-full bg-gradient-to-br ${topic.color} border-0 shadow-2xl group-hover:shadow-3xl transition-all duration-500 ${
                      !isLocked ? 'hover:shadow-[0_0_30px_rgba(255,255,255,0.3)]' : ''
                    }`}>
                      <CardContent className="p-6 h-full flex flex-col">
                        {/* Glow Effect */}
                        {!isLocked && (
                          <motion.div
                            className="absolute inset-0 opacity-0 group-hover:opacity-30 transition-opacity duration-500"
                            style={{
                              background: `radial-gradient(circle at center, ${topic.glowColor}, transparent 70%)`
                            }}
                            animate={{
                              scale: [1, 1.1, 1],
                              opacity: [0, 0.3, 0]
                            }}
                            transition={{
                              duration: 3,
                              repeat: Infinity,
                              ease: "easeInOut"
                            }}
                          />
                        )}

                        {/* Lock Overlay */}
                        {isLocked && (
                          <div className="absolute inset-0 bg-black/50 flex items-center justify-center z-10">
                            <motion.div
                              animate={{ rotate: [0, 10, -10, 0] }}
                              transition={{ duration: 2, repeat: Infinity }}
                            >
                              <Lock className="w-12 h-12 text-white/80" />
                            </motion.div>
                          </div>
                        )}

                        <div className="flex items-start justify-between mb-4">
                          <motion.div
                            className="p-3 bg-white/20 rounded-xl backdrop-blur-sm"
                            whileHover={{ rotate: 360 }}
                            transition={{ duration: 0.6 }}
                          >
                            <Icon className="w-8 h-8 text-white" />
                          </motion.div>

                          <div className="text-right">
                            <Badge className="bg-white/20 text-white border-white/30 mb-2">
                              {topic.difficulty === 'beginner' 
                                ? (language === 'en' ? 'Beginner' : language === 'hi' ? '‡§®‡•å‡§∏‡§ø‡§ñ‡§ø‡§Ø‡§æ' : '‡¨®‡¨¨‡¨æ‡¨ó‡¨§')
                                : topic.difficulty === 'intermediate'
                                ? (language === 'en' ? 'Intermediate' : language === 'hi' ? '‡§Æ‡§ß‡•ç‡§Ø‡§Æ' : '‡¨Æ‡¨ß‡≠ç‡≠ü‡¨Æ')
                                : (language === 'en' ? 'Advanced' : language === 'hi' ? '‡§â‡§®‡•ç‡§®‡§§' : '‡¨â‡¨®‡≠ç‡¨®‡¨§')}
                            </Badge>
                            <div className="text-white/80 text-sm">
                              ‚ö° {topic.xpReward} XP
                            </div>
                          </div>
                        </div>

                        <h3 className="text-xl font-bold text-white mb-2 group-hover:text-yellow-200 transition-colors">
                          {topic.name[language]}
                        </h3>

                        <p className="text-white/90 text-sm mb-4 flex-grow">
                          {topic.description[language]}
                        </p>

                        {/* Progress Bar */}
                        {!isLocked && (
                          <div className="space-y-2">
                            <div className="flex justify-between text-white/80 text-xs">
                              <span>{language === 'en' ? 'Progress' : language === 'hi' ? '‡§™‡•ç‡§∞‡§ó‡§§‡§ø' : '‡¨™‡≠ç‡¨∞‡¨ó‡¨§‡¨ø'}</span>
                              <span>{topic.progress}%</span>
                            </div>
                            <Progress value={topic.progress} className="h-2 bg-white/20" />
                          </div>
                        )}

                        {/* Sub-games preview */}
                        <div className="flex flex-wrap gap-1 mt-3">
                          {topic.subGames.slice(0, 3).map((game, idx) => (
                            <Badge 
                              key={game.id} 
                              variant="outline" 
                              className="text-xs bg-white/10 text-white border-white/30"
                            >
                              {game.type === 'game' ? 'üéÆ' : game.type === 'puzzle' ? 'üß©' : 'üèÜ'}
                            </Badge>
                          ))}
                        </div>

                        {/* Floating geometric shapes */}
                        <div className="absolute -top-4 -right-4 opacity-20">
                          <motion.div
                            animate={{ rotate: 360 }}
                            transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
                          >
                            <Shapes className="w-16 h-16 text-white" />
                          </motion.div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                );
              })}
            </motion.div>
          ) : (
            // Game Selection View
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className="space-y-8"
            >
              {/* Topic Header */}
              <div className="text-center space-y-4">
                <Button
                  onClick={() => setSelectedTopic(null)}
                  variant="outline"
                  className="mb-4 bg-purple-800/50 border-purple-400 text-purple-200"
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  {language === 'en' ? 'Back to Topics' : language === 'hi' ? '‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏' : '‡¨¨‡¨ø‡¨∑‡≠ü‡¨ó‡≠Å‡¨°‡¨º‡¨ø‡¨ï‡≠Å ‡¨´‡≠á‡¨∞‡¨®‡≠ç‡¨§‡≠Å'}
                </Button>

                <motion.div
                  className={`inline-flex items-center justify-center w-24 h-24 rounded-full bg-gradient-to-br ${selectedTopic.color} shadow-2xl mb-4`}
                  animate={{ 
                    scale: [1, 1.1, 1],
                    boxShadow: [
                      `0 0 20px ${selectedTopic.glowColor}`,
                      `0 0 40px ${selectedTopic.glowColor}`,
                      `0 0 20px ${selectedTopic.glowColor}`
                    ]
                  }}
                  transition={{ duration: 2, repeat: Infinity }}
                >
                  <selectedTopic.icon className="w-12 h-12 text-white" />
                </motion.div>

                <h2 className="text-4xl font-bold text-white mb-2">
                  {selectedTopic.name[language]}
                </h2>
                <p className="text-purple-200 max-w-2xl mx-auto">
                  {selectedTopic.description[language]}
                </p>
              </div>

              {/* Games Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {selectedTopic.subGames.map((game, index) => (
                  <motion.div
                    key={game.id}
                    initial={{ opacity: 0, y: 50 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="group cursor-pointer"
                    whileHover={{ scale: 1.05, y: -5 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => handleGameSelect(game.id)}
                  >
                    <Card className="relative overflow-hidden bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-md border-white/20 shadow-xl group-hover:shadow-2xl transition-all duration-500 h-full">
                      <CardContent className="p-6 text-center space-y-4">
                        {/* Game Type Icon */}
                        <motion.div
                          className={`w-16 h-16 mx-auto rounded-full flex items-center justify-center ${
                            game.type === 'game' 
                              ? 'bg-green-500/20 text-green-400' 
                              : game.type === 'puzzle'
                              ? 'bg-blue-500/20 text-blue-400'
                              : 'bg-orange-500/20 text-orange-400'
                          }`}
                          whileHover={{ rotate: 360, scale: 1.1 }}
                          transition={{ duration: 0.6 }}
                        >
                          {game.type === 'game' ? (
                            <Gamepad2 className="w-8 h-8" />
                          ) : game.type === 'puzzle' ? (
                            <Puzzle className="w-8 h-8" />
                          ) : (
                            <Trophy className="w-8 h-8" />
                          )}
                        </motion.div>

                        <h3 className="text-xl font-bold text-white group-hover:text-yellow-200 transition-colors">
                          {game.name[language]}
                        </h3>

                        <Badge className={`${
                          game.type === 'game' 
                            ? 'bg-green-500/20 text-green-300 border-green-400/50' 
                            : game.type === 'puzzle'
                            ? 'bg-blue-500/20 text-blue-300 border-blue-400/50'
                            : 'bg-orange-500/20 text-orange-300 border-orange-400/50'
                        }`}>
                          {game.type === 'game' 
                            ? (language === 'en' ? 'Interactive Game' : language === 'hi' ? '‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§ó‡•á‡§Æ' : '‡¨á‡¨£‡≠ç‡¨ü‡¨∞‡¨æ‡¨ï‡≠ç‡¨ü‡¨ø‡¨≠‡≠ç ‡¨ó‡≠á‡¨Æ‡≠ç')
                            : game.type === 'puzzle'
                            ? (language === 'en' ? 'Brain Puzzle' : language === 'hi' ? '‡§¶‡§ø‡§Æ‡§æ‡§ó‡•Ä ‡§™‡§π‡•á‡§≤‡•Ä' : '‡¨Æ‡¨∏‡≠ç‡¨§‡¨ø‡¨∑‡≠ç‡¨ï ‡¨™‡¨π‡≠á‡¨≤‡¨ø')
                            : (language === 'en' ? 'Challenge Mode' : language === 'hi' ? '‡§ö‡•à‡§≤‡•á‡§Ç‡§ú ‡§Æ‡•ã‡§°' : '‡¨ö‡≠ç‡≠ü‡¨æ‡¨≤‡≠á‡¨û‡≠ç‡¨ú ‡¨Æ‡≠ã‡¨°‡≠ç')}
                        </Badge>

                        <motion.div
                          className="flex items-center justify-center text-white/80"
                          whileHover={{ scale: 1.1 }}
                        >
                          <Play className="w-5 h-5 mr-2" />
                          {language === 'en' ? 'Play Now' : language === 'hi' ? '‡§Ö‡§≠‡•Ä ‡§ñ‡•á‡§≤‡•á‡§Ç' : '‡¨¨‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨Æ‡¨æ‡¨® ‡¨ñ‡≠á‡¨≥‡¨®‡≠ç‡¨§‡≠Å'}
                        </motion.div>

                        {/* Floating particles */}
                        <div className="absolute inset-0 pointer-events-none">
                          {[...Array(5)].map((_, i) => (
                            <motion.div
                              key={i}
                              className="absolute w-1 h-1 bg-white/30 rounded-full"
                              style={{
                                left: `${Math.random() * 100}%`,
                                top: `${Math.random() * 100}%`
                              }}
                              animate={{
                                y: [-10, 10, -10],
                                opacity: [0.3, 0.8, 0.3]
                              }}
                              transition={{
                                duration: 2 + Math.random() * 2,
                                repeat: Infinity,
                                delay: i * 0.5
                              }}
                            />
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          )}
        </div>
      </div>

      {/* Floating Action Elements */}
      <AnimatePresence>
        {!selectedTopic && (
          <motion.div
            initial={{ opacity: 0, scale: 0 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0 }}
            className="fixed bottom-8 right-8 z-30"
          >
            <motion.div
              className="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 rounded-full shadow-2xl cursor-pointer"
              whileHover={{ scale: 1.1, rotate: 360 }}
              whileTap={{ scale: 0.9 }}
              animate={{
                boxShadow: [
                  '0 0 20px rgba(147, 51, 234, 0.5)',
                  '0 0 40px rgba(147, 51, 234, 0.8)',
                  '0 0 20px rgba(147, 51, 234, 0.5)'
                ]
              }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              <Star className="w-8 h-8" />
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}